<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Euclid</name>
    </assembly>
    <members>
        <member name="M:Euclid.Analytics.Clustering.ClusteringContext`1.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Euclid.Analytics.Clustering.VarType},System.Collections.Generic.Dictionary{System.Int32,System.Double[]})">
            <summary>
            Generates the clustering context from the header, the types of the variables and 
            </summary>
            <param name="headers">Names of the predictors (variables).</param>
            <param name="types">Types of the predictors (variables)</param>
            <param name="dictionaries">Dictionaries associated to the enum. Unused so far. May contain weights or counts.</param>
        </member>
        <member name="M:Euclid.Analytics.Clustering.ClusteringContext`1.Type(System.Int32)">
            <summary>
            Returns the VarType of the variable specified by the index.
            </summary>
            <param name="index">Index of the variable.</param>
            <returns>The VarType of the predictor (variable) with the specified index.</returns>
        </member>
        <member name="M:Euclid.Analytics.Clustering.ClusteringContext`1.Labels(System.Int32)">
            <summary>
            Returns the name (specified by the header) of the variable specified by the index.
            </summary>
            <param name="index">Index of the variable.</param>
            <returns>The name of the predictor with the specified index.</returns>
        </member>
        <member name="M:Euclid.Analytics.Clustering.ClusteringContext`1.Dictionary(System.Int32)">
            <summary>
            Returns the pair associated to the variable specified by the index.
            </summary>
            <param name="index">Index of the variable.</param>
            <returns>The Pair associated to the predictor (variable) with the specified index.</returns>
        </member>
        <member name="T:Euclid.Analytics.LinearModel">
            <summary>
            Stores the metrics of a linear regression and allows prediction
            </summary>
        </member>
        <member name="M:Euclid.Analytics.LinearModel.#ctor(System.Double,System.Double[],System.Double[],System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>
            Default constructor for a linear model
            </summary>
            <param name="constant">the constant term</param>
            <param name="factors">the regression coefficients</param>
            <param name="correlations">the zero-degree correlations</param>
            <param name="sampleSize">the sample size</param>
            <param name="SSE">the sum of squared due to error</param>
            <param name="SSR">the sum of squared due to the regression</param>
            <param name="succeeded">the status of the regression</param>
        </member>
        <member name="M:Euclid.Analytics.LinearModel.#ctor">
            <summary>
            Builds a linear model for a failed regression
            </summary>
        </member>
        <member name="M:Euclid.Analytics.LinearModel.#ctor(System.Double,System.Int32,System.Double)">
            <summary>
            Builds a constant linear model
            </summary>
            <param name="constant">the constant</param>
            <param name="sampleSize">the sample size</param>
            <param name="SSE">the sum of squares due to error</param>
        </member>
        <member name="M:Euclid.Analytics.LinearModel.#ctor(System.Double,System.Double[],System.Double[],System.Int32,System.Double,System.Double)">
            <summary> Builds a linear model for a succesful regression </summary>
            <param name="constant">the regression constant term</param>
            <param name="factors">the regression linear coefficients</param>
            <param name="correlations">the zero-degree correlations</param>
            <param name="sampleSize">the sample size</param>
            <param name="SSE">the sum of squares due to the error</param>
            <param name="SSR">the sum of squares due to the regression</param>
        </member>
        <member name="P:Euclid.Analytics.LinearModel.Constant">
            <summary>
            Gets the constant term
            </summary>
        </member>
        <member name="P:Euclid.Analytics.LinearModel.Factors">
            <summary>
            Gets the linear terms
            </summary>
        </member>
        <member name="P:Euclid.Analytics.LinearModel.Correlations">
            <summary>
            Gets the correlations between the explanatory variables and the regressand
            </summary>
        </member>
        <member name="P:Euclid.Analytics.LinearModel.R2">
            <summary>
            Gets the R² on the sample data
            </summary>
        </member>
        <member name="P:Euclid.Analytics.LinearModel.AdjustedR2">
            <summary>
            Gets the adjusted R² on the sample data
            </summary>
        </member>
        <member name="P:Euclid.Analytics.LinearModel.Succeeded">
            <summary>
            specifies whether the regression succeeds
            </summary>
        </member>
        <member name="P:Euclid.Analytics.LinearModel.SSE">
            <summary>
            Gets the sum of squares due to error
            </summary>
        </member>
        <member name="P:Euclid.Analytics.LinearModel.SSR">
            <summary>
            Gets the sum of squares due to the regression
            </summary>
        </member>
        <member name="P:Euclid.Analytics.LinearModel.SST">
            <summary>
            Gets the total sum of squares
            </summary>
        </member>
        <member name="M:Euclid.Analytics.LinearModel.ToString">
            <summary>
            Returns a string that represents the linear model
            </summary>
            <returns>a string that represents the linear model</returns>
        </member>
        <member name="M:Euclid.Analytics.LinearModel.Predict(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns the estimator for the given set of data
            </summary>
            <param name="x">the set of regressors</param>
            <returns>the estimator of the regressed data</returns>
        </member>
        <member name="M:Euclid.Analytics.LinearModel.Predict(Euclid.Vector)">
            <summary>
            Returns the estimator for the given set of data
            </summary>
            <param name="x">the set of regressors</param>
            <returns>the estimator of the regressed data</returns>
        </member>
        <member name="T:Euclid.Analytics.IPredictor`2">
            <summary>
            Interface for predictors
            </summary>
            <typeparam name="T">the predicted type</typeparam>
            <typeparam name="U">the predictors type</typeparam>
        </member>
        <member name="M:Euclid.Analytics.IPredictor`2.Predict(System.Collections.Generic.IList{`1})">
            <summary>Prediction method</summary>
            <param name="x">the predictors</param>
            <returns>the prediction</returns>
        </member>
        <member name="T:Euclid.Analytics.NeuralNetworks.FeedForward.Layer">
            <summary>A Layer class for feed forward perceptrons</summary>
        </member>
        <member name="P:Euclid.Analytics.NeuralNetworks.FeedForward.Layer.Clone">
            <summary>Gets a deep copy of the Layer</summary>
        </member>
        <member name="P:Euclid.Analytics.NeuralNetworks.FeedForward.Layer.Parameters">
            <summary>Gets the number of parameters of the Layer</summary>
        </member>
        <member name="T:Euclid.Analytics.Regressions.LazyPartialLeastSquaresLinearRegression`2">
            <summary>
            LazyPartialLeastSquaresLinearRegression class (performs all 2^n possible regressions)
            </summary>
            <typeparam name="T">the legends' type</typeparam>
            <typeparam name="V">the labels' type</typeparam>
        </member>
        <member name="M:Euclid.Analytics.Regressions.LazyPartialLeastSquaresLinearRegression`2.#ctor(Euclid.IndexedSeries.DataFrame{`0,System.Double,`1},Euclid.IndexedSeries.Series{`0,System.Double,`1})">
            <summary>
            Builds a LazyPartialLeastSquaresLinearRegression to regress a <c>Series</c> on a <c>DataFrame</c>
            </summary>
            <param name="x">the <c>DataFrame</c></param>
            <param name="y">the <c>Series</c></param>
        </member>
        <member name="P:Euclid.Analytics.Regressions.LazyPartialLeastSquaresLinearRegression`2.ReturnAverageIfFailed">
            <summary>Gets and sets whether the Y's average should be return when the regression fails</summary>
        </member>
        <member name="P:Euclid.Analytics.Regressions.LazyPartialLeastSquaresLinearRegression`2.WithConstant">
            <summary>Gets and sets whether the regression should involve a constant term</summary>
        </member>
        <member name="P:Euclid.Analytics.Regressions.LazyPartialLeastSquaresLinearRegression`2.LinearModel">
            <summary>
            Gets the result <c>LinearModel</c>
            </summary>
        </member>
        <member name="P:Euclid.Analytics.Regressions.LazyPartialLeastSquaresLinearRegression`2.Status">
            <summary>
            Gets the regression's final status
            </summary>
        </member>
        <member name="M:Euclid.Analytics.Regressions.LazyPartialLeastSquaresLinearRegression`2.Regress">
            <summary>
            Performs the regression
            </summary>
        </member>
        <member name="T:Euclid.Analytics.Regressions.LASSORegression`2">
            <summary>
            Performs a LASSO regression for a given regularization factor
            </summary>
            <typeparam name="T">the legends</typeparam>
            <typeparam name="V">the labels</typeparam>
        </member>
        <member name="M:Euclid.Analytics.Regressions.LASSORegression`2.#ctor(Euclid.IndexedSeries.DataFrame{`0,System.Double,`1},Euclid.IndexedSeries.Series{`0,System.Double,`1},System.Double)">
            <summary>Buils a LASSO to regress a <c>Series</c> on a <c>DataFrame</c></summary>
            <param name="x">the <c>DataFrame</c></param>
            <param name="y">the <c>Series</c></param>
            <param name="regularization">the regularization factor</param>
        </member>
        <member name="P:Euclid.Analytics.Regressions.LASSORegression`2.ComputeError">
            <summary>Gets and sets whether the errors should be computed after the regression</summary>
        </member>
        <member name="P:Euclid.Analytics.Regressions.LASSORegression`2.Regularization">
            <summary>Gets and sets the regularization factor</summary>
        </member>
        <member name="P:Euclid.Analytics.Regressions.LASSORegression`2.LinearModel">
            <summary>
            Gets the result <c>LinearModel</c>
            </summary>
        </member>
        <member name="P:Euclid.Analytics.Regressions.LASSORegression`2.Status">
            <summary>
            Gets the regression's final status
            </summary>
        </member>
        <member name="M:Euclid.Analytics.Regressions.LASSORegression`2.Regress">
            <summary>Performs the regression</summary>
        </member>
        <member name="T:Euclid.Analytics.Regressions.RIDGERegression`2">
            <summary>Performs a RIDGE regression for a given regularization factor</summary>
            <typeparam name="T">the legends</typeparam>
            <typeparam name="V">the labels</typeparam>
        </member>
        <member name="M:Euclid.Analytics.Regressions.RIDGERegression`2.#ctor(Euclid.IndexedSeries.DataFrame{`0,System.Double,`1},Euclid.IndexedSeries.Series{`0,System.Double,`1},System.Double)">
            <summary>Builds a RIDGE to regress a <c>Series</c> on a <c>DataFrame</c></summary>
            <param name="x">the <c>DataFrame</c></param>
            <param name="y">the <c>Series</c></param>
            <param name="regularization">the regularization factor</param>
        </member>
        <member name="P:Euclid.Analytics.Regressions.RIDGERegression`2.ReturnAverageIfFailed">
            <summary>Gets and sets whether the Y's average should be return when the regression fails</summary>
        </member>
        <member name="P:Euclid.Analytics.Regressions.RIDGERegression`2.WithConstant">
            <summary>Gets and sets whether the regression should involve a constant term</summary>
        </member>
        <member name="P:Euclid.Analytics.Regressions.RIDGERegression`2.ComputeError">
            <summary>Gets and sets whether the errors should be computed after the regression</summary>
        </member>
        <member name="P:Euclid.Analytics.Regressions.RIDGERegression`2.Regularization">
            <summary>Gets and sets the regularization factor</summary>
        </member>
        <member name="P:Euclid.Analytics.Regressions.RIDGERegression`2.LinearModel">
            <summary>
            Gets the result <c>LinearModel</c>
            </summary>
        </member>
        <member name="P:Euclid.Analytics.Regressions.RIDGERegression`2.Status">
            <summary>
            Gets the regression's final status
            </summary>
        </member>
        <member name="M:Euclid.Analytics.Regressions.RIDGERegression`2.Regress">
            <summary>
            Performs the regression
            </summary>
        </member>
        <member name="T:Euclid.Analytics.Regressions.OrdinaryLeastSquaresLinearRegression`2">
            <summary>OrdinaryLeastSquaresLinearRegression class</summary>
            <typeparam name="T">the legends' type</typeparam>
            <typeparam name="V">the labels' type</typeparam>
        </member>
        <member name="M:Euclid.Analytics.Regressions.OrdinaryLeastSquaresLinearRegression`2.#ctor(Euclid.IndexedSeries.DataFrame{`0,System.Double,`1},Euclid.IndexedSeries.Series{`0,System.Double,`1})">
            <summary>Builds a OLS to regress a <c>Series</c> on a <c>DataFrame</c></summary>
            <param name="x">the <c>DataFrame</c></param>
            <param name="y">the <c>Series</c></param>
        </member>
        <member name="P:Euclid.Analytics.Regressions.OrdinaryLeastSquaresLinearRegression`2.ReturnAverageIfFailed">
            <summary>Gets and sets whether the Y's average should be return when the regression fails</summary>
        </member>
        <member name="P:Euclid.Analytics.Regressions.OrdinaryLeastSquaresLinearRegression`2.WithConstant">
            <summary>Gets and sets whether the regression should involve a constant term</summary>
        </member>
        <member name="P:Euclid.Analytics.Regressions.OrdinaryLeastSquaresLinearRegression`2.ComputeError">
            <summary>Gets and sets whether the errors should be computed after the regression</summary>
        </member>
        <member name="P:Euclid.Analytics.Regressions.OrdinaryLeastSquaresLinearRegression`2.LinearModel">
            <summary>
            Gets the result <c>LinearModel</c>
            </summary>
        </member>
        <member name="P:Euclid.Analytics.Regressions.OrdinaryLeastSquaresLinearRegression`2.Status">
            <summary>
            Gets the regression's final status
            </summary>
        </member>
        <member name="M:Euclid.Analytics.Regressions.OrdinaryLeastSquaresLinearRegression`2.Regress">
            <summary>
            Performs the regression
            </summary>
        </member>
        <member name="T:Euclid.Analytics.Regressions.RegressionStatus">
            <summary>
            Returns the status of the regression
            </summary>
        </member>
        <member name="F:Euclid.Analytics.Regressions.RegressionStatus.NotRan">
            <summary> the regression did not run </summary>
        </member>
        <member name="F:Euclid.Analytics.Regressions.RegressionStatus.Normal">
            <summary> the regression ran as expected </summary>
        </member>
        <member name="F:Euclid.Analytics.Regressions.RegressionStatus.IterationExceeded">
            <summary> the regression exceeded its max iterations </summary>
        </member>
        <member name="F:Euclid.Analytics.Regressions.RegressionStatus.BadData">
            <summary> the regression failed </summary>
        </member>
        <member name="T:Euclid.Analytics.Regressions.RegressionHelper">
            <summary>A helper for the regression</summary>
        </member>
        <member name="M:Euclid.Analytics.Regressions.RegressionHelper.Text``2(Euclid.IndexedSeries.DataFrame{``0,System.Double,``1},Euclid.IndexedSeries.Series{``0,System.Double,``1},Euclid.Analytics.LinearModel,System.String)">
            <summary>Displays the regression result as a string</summary>
            <typeparam name="T"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dataFrame">the dataframe</param>
            <param name="series">the series</param>
            <param name="linearModel">the linear model</param>
            <param name="format">the format for the coefficients</param>
            <returns>a string</returns>
        </member>
        <member name="T:Euclid.Analytics.Regressions.Scaling">
            <summary>Scaling class</summary>
        </member>
        <member name="P:Euclid.Analytics.Regressions.Scaling.Intercept">
            <summary>Gets the intercept of the Scaling</summary>
        </member>
        <member name="P:Euclid.Analytics.Regressions.Scaling.ScalingCoefficient">
            <summary>Gets the scaling coefficient of the Scaling</summary>
        </member>
        <member name="M:Euclid.Analytics.Regressions.Scaling.Scale(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>Scales "up" a series of data</summary>
            <param name="data">the data to scale "up" : intercept + x * scalingCoefficient</param>
            <returns>an array of double</returns>
        </member>
        <member name="M:Euclid.Analytics.Regressions.Scaling.Reduce(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>Scales "down" a series of data</summary>
            <param name="data">the data to scale "down" (x-intercept)/scalingCoefficient</param>
            <returns>an array of double</returns>
        </member>
        <member name="M:Euclid.Analytics.Regressions.Scaling.CreateZScore(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>Creates a Scaling based on the average and the standard deviation</summary>
            <param name="data">the data to scale</param>
            <returns>a <c>Scaling</c> class</returns>
        </member>
        <member name="M:Euclid.Analytics.Regressions.Scaling.CreateMinMax(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>Creates a Scaling based on the minimum and maximum</summary>
            <param name="data">the data to scale</param>
            <returns>a <c>Scaling</c> class</returns>
        </member>
        <member name="M:Euclid.Analytics.Tests.KolmogorovSmirnovTest.IsSameDistribution(System.Double[],System.Double[],System.Double)">
            <summary>
            Performs the Kolmogorov Smirnov test.
            </summary>
            <param name="series1">The first sample.</param>
            <param name="series2">The second sample.</param>
            <param name="alpha">The confidence level of the test.</param>
            <returns>True if the series appear to be drawn from the same distribution, false otherwise.</returns>
        </member>
        <member name="T:Euclid.Arithmetics.BinomialCoefficients">
            <summary>
            Binomial coefficients class
            </summary>
        </member>
        <member name="M:Euclid.Arithmetics.BinomialCoefficients.#ctor(System.Int32)">
            <summary>
            Calculates all the binomial coefficients for a given degree
            </summary>
            <param name="n">the degree</param>
        </member>
        <member name="P:Euclid.Arithmetics.BinomialCoefficients.Item(System.Int32)">
            <summary>Returns the binomial coefficient for a given index</summary>
            <param name="index">the index</param>
            <returns>an <c>int</c></returns>
        </member>
        <member name="P:Euclid.Arithmetics.BinomialCoefficients.Coefficients">
            <summary>Gets all the binomial coefficients</summary>
        </member>
        <member name="T:Euclid.Arithmetics.Subsets">
            <summary>
            Subsets class
            </summary>
        </member>
        <member name="M:Euclid.Arithmetics.Subsets.SubSets``1(System.Collections.Generic.List{``0})">
            <summary>
            Returns all possibles subsets of a List
            </summary>
            <typeparam name="T">the template type</typeparam>
            <param name="data">the original data</param>
            <returns>the List of subsets</returns>
        </member>
        <member name="T:Euclid.Complex">
            <summary>
            Standard Complex numbers
            </summary>
        </member>
        <member name="M:Euclid.Complex.#ctor(System.Double,System.Double)">
            <summary>
            Builds a <c>Complex</c> number
            </summary>
            <param name="real">the real part of the <c>Complex</c></param>
            <param name="imaginary">the imaginary part of the <c>Complex</c></param>
        </member>
        <member name="M:Euclid.Complex.#ctor">
            <summary>
            Builds a <c>Complex</c> number with its real and imaginary parts at zero
            </summary>
        </member>
        <member name="P:Euclid.Complex.Re">
            <summary>
            Returns the real part of the <c>Complex</c>
            </summary>
        </member>
        <member name="P:Euclid.Complex.Im">
            <summary>
            Returns the imaginary part of the <c>Complex</c>
            </summary>
        </member>
        <member name="P:Euclid.Complex.Conjugate">
            <summary>
            The conjugate number of the <c>Complex</c>
            </summary>
        </member>
        <member name="M:Euclid.Complex.Modulus">
            <summary>
            Returns the modulus of the <c>Complex</c>
            </summary>
            <returns>the modulus of the complex</returns>
        </member>
        <member name="M:Euclid.Complex.SquareModulus">
            <summary>Returns the square of the modulus of the <c>Complex</c></summary>
            <returns>a double</returns>
        </member>
        <member name="M:Euclid.Complex.Argument">
            <summary>
            Returns the argument of the <c>Complex</c> (between -Pi and +Pi)
            </summary>
            <returns>the argument of the <c>Complex</c></returns>
        </member>
        <member name="M:Euclid.Complex.ToString">
            <summary>
            Returns a string that represents the <c>Complex</c>
            </summary>
            <returns>a string that represents the <c>Complex</c></returns>
        </member>
        <member name="M:Euclid.Complex.ToString(System.String)">
            <summary>
            returns a string that represents the <c>Complex</c> with the specified format to the composants
            </summary>
            <param name="format">the format string</param>
            <returns>a string that represents the <c>Complex</c></returns>
        </member>
        <member name="P:Euclid.Complex.I">
            <summary>
            Returns the imaginary number i
            </summary>
        </member>
        <member name="P:Euclid.Complex.One">
            <summary>
            Returns the complex representation of the real number 1
            </summary>
        </member>
        <member name="P:Euclid.Complex.Zero">
            <summary>
            Returns a complex with both imaginary and real parts equal to zero
            </summary>
        </member>
        <member name="M:Euclid.Complex.Exp(Euclid.Complex)">
            <summary>Returns a complex from its exponential form </summary>
            <param name="c">the exponential argument</param>
            <returns>a <c>Complex</c></returns>
        </member>
        <member name="M:Euclid.Complex.op_Addition(Euclid.Complex,Euclid.Complex)">
            <summary>
            Allows to add a complex to another complex
            </summary>
            <param name="x">the right hand side</param>
            <param name="y">the left hand side</param>
            <returns>the <c>Complex</c> result of the addition</returns>
        </member>
        <member name="M:Euclid.Complex.op_Addition(Euclid.Complex,System.Double)">
            <summary>
            Allows to add a scalar to a complex
            </summary>
            <param name="c">the complex left hand side</param>
            <param name="d">the scalar right hand side</param>
            <returns>the <c>Complex</c> result of the addition</returns>
        </member>
        <member name="M:Euclid.Complex.op_Addition(System.Double,Euclid.Complex)">
            <summary>
            Allows to add a scalar to a complex
            </summary>
            <param name="d">the scalar right hand side </param>
            <param name="c">the complex left hand side</param>
            <returns>the <c>Complex</c> result of the addition</returns>
        </member>
        <member name="M:Euclid.Complex.op_Subtraction(Euclid.Complex,Euclid.Complex)">
            <summary>
            Allows to substract a complex to another complex
            </summary>
            <param name="x">the right hand side</param>
            <param name="y">the left hand side</param>
            <returns>the <c>Complex</c> result of the substraction</returns>
        </member>
        <member name="M:Euclid.Complex.op_Multiply(Euclid.Complex,Euclid.Complex)">
            <summary>
            Allows to multiply a complex by another complex
            </summary>
            <param name="x">the left hand side</param>
            <param name="y">the right hand side</param>
            <returns>the <c>Complex</c> result of the multiplication</returns>
        </member>
        <member name="M:Euclid.Complex.op_Multiply(Euclid.Complex,System.Double)">
            <summary>
            Allows to multiply a complex by a scalar
            </summary>
            <param name="c">the complex number</param>
            <param name="d">the scalar</param>
            <returns>the <c>Complex</c> result of the multiplication</returns>
        </member>
        <member name="M:Euclid.Complex.op_Multiply(System.Double,Euclid.Complex)">
            <summary>
            Allows to multiply a complex by a scalar
            </summary>
            <param name="d">the scalar</param>
            <param name="c">the complex number</param>
            <returns>the <c>Complex</c> result of the multiplication</returns>
        </member>
        <member name="M:Euclid.Complex.op_Division(Euclid.Complex,Euclid.Complex)">
            <summary>
            Allows to divide a complex by another complex
            </summary>
            <param name="x">the numerator</param>
            <param name="y">the denominator</param>
            <returns>the <c>Complex</c> result of the division</returns>
        </member>
        <member name="M:Euclid.Complex.op_Division(Euclid.Complex,System.Double)">
            <summary>Allows to divide a complex by a double</summary>
            <param name="x">the numerator</param>
            <param name="d">the denominator</param>
            <returns>the <c>Complex</c> result of the division</returns>
        </member>
        <member name="M:Euclid.Complex.op_UnaryNegation(Euclid.Complex)">
            <summary>Returns the opposite of the complex</summary>
            <param name="x">the <c>Complex</c></param>
            <returns>the opposite complex</returns>
        </member>
        <member name="T:Euclid.Distributions.Continuous.CauchyDistribution">
            <summary>
            Cauchy distribution class
            </summary>
        </member>
        <member name="M:Euclid.Distributions.Continuous.CauchyDistribution.#ctor(System.Double,System.Double)">
            <summary>Builds a Cauchy distribution</summary>
            <param name="x0">the location</param>
            <param name="gamma">the scale</param>
        </member>
        <member name="P:Euclid.Distributions.Continuous.CauchyDistribution.Entropy">
            <summary>Gets the distribution's entropy</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.CauchyDistribution.Support">
            <summary>Gets the distribution's support</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.CauchyDistribution.Mean">
            <summary>Gets the distribution's mean</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.CauchyDistribution.Median">
            <summary>Gets the distribution's median</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.CauchyDistribution.Mode">
            <summary>Gets the distribution's mode</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.CauchyDistribution.Skewness">
            <summary>Gets the distribution's skewness</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.CauchyDistribution.StandardDeviation">
            <summary>Gets the distribution's standard deviation</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.CauchyDistribution.Variance">
            <summary>Gets the distribution's variance</summary>
        </member>
        <member name="M:Euclid.Distributions.Continuous.CauchyDistribution.CumulativeDistribution(System.Double)">
            <summary>Computes the cumulative distribution(CDF) of the distribution at x, i.e.P(X ≤ x)</summary>
            <param name="x">the location at which to compute the function</param>
            <returns>a double</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.CauchyDistribution.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function(InvCDF) for the distribution at the given probability.This is also known as the quantile or percent point function
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density</param>
            <returns>the inverse cumulative density at p</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.CauchyDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Computes the probability density of the distribution(PDF) at x, i.e. ∂P(X ≤ x)/∂x
            </summary>
            <param name="x">The location at which to compute the density</param>
            <returns>a <c>double</c></returns>
        </member>
        <member name="T:Euclid.Distributions.Continuous.ChiSquaredDistribution">
            <summary>
            Chi squared distribution
            </summary>
        </member>
        <member name="M:Euclid.Distributions.Continuous.ChiSquaredDistribution.#ctor(System.Int32)">
            <summary>
            Builds a Chi² distribution
            </summary>
            <param name="k">the number of freedom degrees</param>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ChiSquaredDistribution.Entropy">
            <summary>
            Gets the distribution's entropy
            </summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ChiSquaredDistribution.Support">
            <summary>
            Gets the distribution's support
            </summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ChiSquaredDistribution.Mean">
            <summary>
            Gets the distribution's mean
            </summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ChiSquaredDistribution.Median">
            <summary>
            Gets the distribution's median
            </summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ChiSquaredDistribution.Mode">
            <summary>
            Gets the distribution's mode
            </summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ChiSquaredDistribution.Skewness">
            <summary>
            Gets the distribution's skewness
            </summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ChiSquaredDistribution.StandardDeviation">
            <summary>
            Gets the dsitribution's standard deviation
            </summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ChiSquaredDistribution.Variance">
            <summary>
            Gets the distribution's variance
            </summary>
        </member>
        <member name="M:Euclid.Distributions.Continuous.ChiSquaredDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution(CDF) of the distribution at x, i.e.P(X ≤ x)
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function</param>
            <returns>the cumulative distribution at location x</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.ChiSquaredDistribution.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function(InvCDF) for the distribution at the given probability.This is also known as the quantile or percent point function
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density</param>
            <returns>the inverse cumulative density at p</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.ChiSquaredDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Computes the probability density of the distribution(PDF) at x, i.e. ∂P(X ≤ x)/∂x
            </summary>
            <param name="x">The location at which to compute the density</param>
            <returns>a <c>double</c></returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.ChiSquaredDistribution.Sample(System.Int32)">
            <summary>
            Generates a sequence of samples from the normal distribution using the algorithm
            </summary>
            <param name="numberOfPoints">the sample's size</param>
            <returns>an array of double</returns>
        </member>
        <member name="T:Euclid.Distributions.Continuous.ExponentialPowerDistribution">
            <summary>Exponential power distribution class</summary>
        </member>
        <member name="M:Euclid.Distributions.Continuous.ExponentialPowerDistribution.#ctor(System.Double,System.Double,System.Double)">
            <summary> Builds a Exponential power distribution</summary>
            <param name="mu">the location</param>
            <param name="alpha">the scale</param>
            <param name="beta">the shape</param>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ExponentialPowerDistribution.Entropy">
            <summary>Gets the distribution's entropy</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ExponentialPowerDistribution.Mean">
            <summary>Gets the distribution's mean</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ExponentialPowerDistribution.Median">
            <summary>Gets the distribution's median</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ExponentialPowerDistribution.Mode">
            <summary>Gets the distribution's mode</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ExponentialPowerDistribution.Skewness">
            <summary>Gets the distribution's skewness</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ExponentialPowerDistribution.StandardDeviation">
            <summary>Gets the distribution's standard deviation</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ExponentialPowerDistribution.Support">
            <summary>Gets the distribution's support</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ExponentialPowerDistribution.Variance">
            <summary>Gets the distribution's variance</summary>
        </member>
        <member name="M:Euclid.Distributions.Continuous.ExponentialPowerDistribution.CumulativeDistribution(System.Double)">
            <summary>Computes the cumulative distribution(CDF) of the distribution at x, i.e.P(X ≤ x)</summary>
            <param name="x">the location at which to compute the function</param>
            <returns>a double</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.ExponentialPowerDistribution.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function
            </summary>
            <param name="p">the target probablity</param>
            <returns>a double</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.ExponentialPowerDistribution.ProbabilityDensity(System.Double)">
            <summary>Computes the probability density of the distribution(PDF) at x, i.e. ∂P(X ≤ x)/∂x</summary>
            <param name="x">The location at which to compute the density</param>
            <returns>a <c>double</c></returns>
        </member>
        <member name="T:Euclid.Distributions.Continuous.FisherDistribution">
            <summary>
            Fisher distribution class
            </summary>
        </member>
        <member name="M:Euclid.Distributions.Continuous.FisherDistribution.Create(System.Double,System.Double)">
            <summary>
            Creates a new Fisher distribution
            </summary>
            <param name="d1">the first number of freedom degrees</param>
            <param name="d2">the second number of freedom degrees</param>
            <returns>a <c>FisherDistribution</c></returns>
        </member>
        <member name="P:Euclid.Distributions.Continuous.FisherDistribution.Entropy">
            <summary>Gets the distribution's entropy</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.FisherDistribution.Mean">
            <summary>Gets the distribution's mean</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.FisherDistribution.Median">
            <summary>Gets the distribution's median</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.FisherDistribution.Mode">
            <summary>Gets the distribution's mode</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.FisherDistribution.Skewness">
            <summary>Gets the distribution's skewness</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.FisherDistribution.StandardDeviation">
            <summary>Gets the distribution's standard deviation</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.FisherDistribution.Support">
            <summary>Gets the distribution's support</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.FisherDistribution.Variance">
            <summary>Gets the distribution's variance</summary>
        </member>
        <member name="M:Euclid.Distributions.Continuous.FisherDistribution.CumulativeDistribution(System.Double)">
            <summary>Computes the cumulative distribution(CDF) of the distribution at x, i.e.P(X ≤ x)</summary>
            <param name="x">the location at which to compute the function</param>
            <returns>a double</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.FisherDistribution.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function
            </summary>
            <param name="p">the target probablity</param>
            <returns>a double</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.FisherDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Computes the probability density of the distribution(PDF) at x, i.e. ∂P(X ≤ x)/∂x
            </summary>
            <param name="x">The location at which to compute the density</param>
            <returns>a <c>double</c></returns>
        </member>
        <member name="T:Euclid.Distributions.Continuous.GammaDistribution">
            <summary>
            Gamma distribution class
            </summary>
        </member>
        <member name="M:Euclid.Distributions.Continuous.GammaDistribution.#ctor(System.Double,System.Double)">
            <summary>
            Builds a Gamma distribution
            </summary>
            <param name="k">the shapee</param>
            <param name="theta">the scale</param>
        </member>
        <member name="P:Euclid.Distributions.Continuous.GammaDistribution.Entropy">
            <summary>Gets the distribution's entropy</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.GammaDistribution.Support">
            <summary>Gets the distribution's support </summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.GammaDistribution.Mean">
            <summary>Gets the distribution's mean </summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.GammaDistribution.Median">
            <summary>Gets the distribution's median </summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.GammaDistribution.Mode">
            <summary>Gets the distribution's mode</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.GammaDistribution.Skewness">
            <summary>Gets the distribution's skewness </summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.GammaDistribution.StandardDeviation">
            <summary>Gets the distribution's standard deviation </summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.GammaDistribution.Variance">
            <summary>Gets the distribution's variance </summary>
        </member>
        <member name="M:Euclid.Distributions.Continuous.GammaDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution(CDF) of the distribution at x, i.e.P(X ≤ x)
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function</param>
            <returns>the cumulative distribution at location x</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.GammaDistribution.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function(InvCDF) for the distribution at the given probability.This is also known as the quantile or percent point function
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density</param>
            <returns>the inverse cumulative density at p</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.GammaDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Computes the probability density of the distribution(PDF) at x, i.e. ∂P(X ≤ x)/∂x
            </summary>
            <param name="x">The location at which to compute the density</param>
            <returns>a <c>double</c></returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.GammaDistribution.Sample(System.Int32)">
            <summary>
            Generates a sequence of samples using the Ahrens-Dieter algorithm
            </summary>
            <param name="numberOfPoints">the sample's size</param>
            <returns>an array of double</returns>
        </member>
        <member name="T:Euclid.Distributions.Continuous.Kernels.IDensityKernel">
            <summary>
            Interface for all density kernels
            </summary>
        </member>
        <member name="M:Euclid.Distributions.Continuous.Kernels.IDensityKernel.K(System.Double)">
            <summary>
            the kernel function
            </summary>
            <param name="x"></param>
            <returns>a double</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.Kernels.IDensityKernel.IntegralK(System.Double)">
            <summary>
            the left hand side integral of the kernel function
            </summary>
            <param name="x"></param>
            <returns>a double</returns>
        </member>
        <member name="T:Euclid.Distributions.Continuous.LaplaceDistribution">
            <summary>
            Laplace distribution class
            </summary>
        </member>
        <member name="M:Euclid.Distributions.Continuous.LaplaceDistribution.#ctor(System.Double,System.Double)">
            <summary>
            Builds a Laplace distribution
            </summary>
            <param name="mu">the location</param>
            <param name="b">the scale</param>
        </member>
        <member name="P:Euclid.Distributions.Continuous.LaplaceDistribution.Entropy">
            <summary>Gets the distribution's entropy</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.LaplaceDistribution.Support">
            <summary>Gets the distribution's support</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.LaplaceDistribution.Mean">
            <summary>Gets the distribution's mean</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.LaplaceDistribution.Median">
            <summary>Gets the distribution's median</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.LaplaceDistribution.Mode">
            <summary>Gets the distribution's mode</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.LaplaceDistribution.Skewness">
            <summary>Gets the distribution's skewness</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.LaplaceDistribution.StandardDeviation">
            <summary>Gets the distribution's standard deviation</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.LaplaceDistribution.Variance">
            <summary>Gets the distribution's variance</summary>
        </member>
        <member name="M:Euclid.Distributions.Continuous.LaplaceDistribution.CumulativeDistribution(System.Double)">
            <summary>Computes the cumulative distribution(CDF) of the distribution at x, i.e.P(X ≤ x)</summary>
            <param name="x">the location at which to compute the function</param>
            <returns>a double</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.LaplaceDistribution.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function
            </summary>
            <param name="p">the target probablity</param>
            <returns>a double</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.LaplaceDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Computes the probability density of the distribution(PDF) at x, i.e. ∂P(X ≤ x)/∂x
            </summary>
            <param name="x">The location at which to compute the density</param>
            <returns>a <c>double</c></returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.LaplaceDistribution.ProbabilityLnDensity(System.Double)">
            <summary>Computes the probability density function's logarithm at x</summary>
            <param name="x">the location at which to compute the density</param>
            <returns>a double</returns>
        </member>
        <member name="T:Euclid.Distributions.Continuous.LogisticDistribution">
            <summary>Logistic distribution class</summary>
        </member>
        <member name="M:Euclid.Distributions.Continuous.LogisticDistribution.#ctor(System.Double,System.Double)">
            <summary>Builds a Logistic distribution</summary>
            <param name="mu">the location</param>
            <param name="s">the scale</param>
        </member>
        <member name="P:Euclid.Distributions.Continuous.LogisticDistribution.Entropy">
            <summary>Gets the distribution's entropy</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.LogisticDistribution.Mean">
            <summary>Gets the distribution's mean</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.LogisticDistribution.Median">
            <summary>Gets the distribution's median</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.LogisticDistribution.Mode">
            <summary>Gets the distribution's mode</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.LogisticDistribution.Skewness">
            <summary>Gets the distribution's skewness</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.LogisticDistribution.StandardDeviation">
            <summary>Gets the distribution's standard deviation</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.LogisticDistribution.Support">
            <summary>Gets the distribution's support</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.LogisticDistribution.Variance">
            <summary>Gets the distribution's variance</summary>
        </member>
        <member name="M:Euclid.Distributions.Continuous.LogisticDistribution.CumulativeDistribution(System.Double)">
            <summary>Computes the cumulative distribution(CDF) of the distribution at x, i.e.P(X ≤ x)</summary>
            <param name="x">the location at which to compute the function</param>
            <returns>a double</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.LogisticDistribution.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function(InvCDF) for the distribution at the given probability.This is also known as the quantile or percent point function
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density</param>
            <returns>the inverse cumulative density at p</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.LogisticDistribution.ProbabilityDensity(System.Double)">
            <summary>Computes the probability density of the distribution(PDF) at x, i.e. ∂P(X ≤ x)/∂x</summary>
            <param name="x">The location at which to compute the density</param>
            <returns>a <c>double</c></returns>
        </member>
        <member name="T:Euclid.Distributions.Continuous.LogNormalDistribution">
            <summary>
            Log Normal distribution class
            </summary>
        </member>
        <member name="M:Euclid.Distributions.Continuous.LogNormalDistribution.#ctor(System.Double,System.Double)">
            <summary>Builds a log normal distribution</summary>
            <param name="mu">the average</param>
            <param name="sigma">the standard deviation</param>
        </member>
        <member name="P:Euclid.Distributions.Continuous.LogNormalDistribution.Entropy">
            <summary>Gets the distribution's entropy</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.LogNormalDistribution.Support">
            <summary>Gets the distribution's support</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.LogNormalDistribution.Mean">
            <summary>Gets the distribution's mean</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.LogNormalDistribution.Median">
            <summary>Gets the distribution's median</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.LogNormalDistribution.Mode">
            <summary>Gets the distribution's mode</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.LogNormalDistribution.Skewness">
            <summary>Gets the distribution's skewness</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.LogNormalDistribution.StandardDeviation">
            <summary>Gets the distribution's standard deviation</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.LogNormalDistribution.Variance">
            <summary>Gets the distributions's variance</summary>
        </member>
        <member name="M:Euclid.Distributions.Continuous.LogNormalDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution(CDF) of the distribution at x, i.e.P(X ≤ x)
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function</param>
            <returns>the cumulative distribution at location x</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.LogNormalDistribution.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function(InvCDF) for the distribution at the given probability.This is also known as the quantile or percent point function
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density</param>
            <returns>the inverse cumulative density at p</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.LogNormalDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Computes the probability density of the distribution(PDF) at x, i.e. ∂P(X ≤ x)/∂x
            </summary>
            <param name="x">The location at which to compute the density</param>
            <returns>a <c>double</c></returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.LogNormalDistribution.Sample(System.Int32)">
            <summary>
            Generates a sequence of samples from the log normal distribution
            </summary>
            <param name="numberOfPoints">the sample's size</param>
            <returns>an array of double</returns>
        </member>
        <member name="T:Euclid.Distributions.Continuous.ParetoDistribution">
             <summary>
            ¨Pareto distribution class
             </summary>
        </member>
        <member name="M:Euclid.Distributions.Continuous.ParetoDistribution.#ctor(System.Double,System.Double)">
            <summary>
            Builds a Pareto distribution
            </summary>
            <param name="xm">the scale</param>
            <param name="alpha">the shape</param>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ParetoDistribution.Entropy">
            <summary>Gets the distribution's entropy</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ParetoDistribution.Support">
            <summary>Gets the distribution's support</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ParetoDistribution.Mean">
            <summary>Gets the distribution's mean</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ParetoDistribution.Median">
            <summary>Gets the distribution's median</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ParetoDistribution.Mode">
            <summary>Gets the distribution's mode</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ParetoDistribution.Skewness">
            <summary>Gets the distribution's skewness</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ParetoDistribution.StandardDeviation">
            <summary>Gets the distribution's standard deviation</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ParetoDistribution.Variance">
            <summary>Gets the distribution's variance</summary>
        </member>
        <member name="M:Euclid.Distributions.Continuous.ParetoDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution(CDF) of the distribution at x, i.e.P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function</param>
            <returns>a double</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.ParetoDistribution.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function(InvCDF) for the distribution at the given probability.This is also known as the quantile or percent point function
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density</param>
            <returns>the inverse cumulative density at p</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.ParetoDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Computes the probability density of the distribution(PDF) at x, i.e. ∂P(X ≤ x)/∂x
            </summary>
            <param name="x">The location at which to compute the density</param>
            <returns>a <c>double</c></returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.ParetoDistribution.Sample(System.Int32)">
            <summary>
            Builds a sample of random variables under this distribution
            </summary>
            <param name="size">the sample's size</param>
            <returns>an array of double</returns>
        </member>
        <member name="T:Euclid.Distributions.Continuous.NormalDistribution">
            <summary>
            Normal distribution class
            </summary>
        </member>
        <member name="M:Euclid.Distributions.Continuous.NormalDistribution.#ctor">
            <summary>
            Builds a standard normal distribution
            </summary>
        </member>
        <member name="M:Euclid.Distributions.Continuous.NormalDistribution.#ctor(System.Double,System.Double)">
            <summary>
            Builds a normal distribution
            </summary>
            <param name="mean">the average</param>
            <param name="standardDeviation">the standard deviation</param>
        </member>
        <member name="M:Euclid.Distributions.Continuous.NormalDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution(CDF) of the distribution at x, i.e.P(X ≤ x)
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function</param>
            <returns>the cumulative distribution at location x</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.NormalDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Computes the probability density of the distribution(PDF) at x, i.e. ∂P(X ≤ x)/∂x
            </summary>
            <param name="x">The location at which to compute the density</param>
            <returns>a <c>double</c></returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.NormalDistribution.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function(InvCDF) for the distribution at the given probability.This is also known as the quantile or percent point function
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density</param>
            <returns>the inverse cumulative density at p</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.NormalDistribution.Sample(System.Int32)">
            <summary>
            Generates a sequence of samples from the normal distribution using the algorithm
            </summary>
            <param name="numberOfPoints">the sample's size</param>
            <returns>an array of double</returns>
        </member>
        <member name="P:Euclid.Distributions.Continuous.NormalDistribution.Entropy">
            <summary>
            Gets the entropy of the normal distribution
            </summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.NormalDistribution.Support">
            <summary>Gets the distribution's support</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.NormalDistribution.Mean">
            <summary>
            Gets the mean(μ) of the normal distribution
            </summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.NormalDistribution.Median">
            <summary>
            Gets the median of the normal distribution
            </summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.NormalDistribution.Mode">
            <summary>
            Gets the mode of the normal distribution
            </summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.NormalDistribution.Skewness">
            <summary>
            Gets the skewness of the normal distribution
            </summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.NormalDistribution.StandardDeviation">
            <summary>
            Gets the distribution's standard deviation
            </summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.NormalDistribution.Variance">
            <summary>
            Gets the distribution's variance
            </summary>
        </member>
        <member name="T:Euclid.Distributions.Continuous.ExponentialDistribution">
            <summary>
            Exponential distribution class
            </summary>
        </member>
        <member name="M:Euclid.Distributions.Continuous.ExponentialDistribution.#ctor(System.Double)">
            <summary>
            Builds a Exponential distribution
            </summary>
            <param name="lambda">the rate</param>
        </member>
        <member name="M:Euclid.Distributions.Continuous.ExponentialDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution(CDF) of the distribution at x, i.e.P(X ≤ x)
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function</param>
            <returns>the cumulative distribution at location x</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.ExponentialDistribution.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function(InvCDF) for the distribution at the given probability.This is also known as the quantile or percent point function
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density</param>
            <returns>the inverse cumulative density at p</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.ExponentialDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Computes the probability density of the distribution(PDF) at x, i.e. ∂P(X ≤ x)/∂x
            </summary>
            <param name="x">The location at which to compute the density</param>
            <returns>a <c>double</c></returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.ExponentialDistribution.Sample(System.Int32)">
            <summary>
            Generates a sequence of samples from the normal distribution using the algorithm
            </summary>
            <param name="numberOfPoints">the sample's size</param>
            <returns>an array of double</returns>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ExponentialDistribution.Support">
            <summary>
            Gets the distribution's support
            </summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ExponentialDistribution.Entropy">
            <summary>
            Gets the distribution's entropy
            </summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ExponentialDistribution.Mean">
            <summary>
            Gets the distribution's mean
            </summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ExponentialDistribution.Median">
            <summary>
            Gets the distribution's median
            </summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ExponentialDistribution.Mode">
            <summary>
            Gets the distribution's mode
            </summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ExponentialDistribution.Skewness">
            <summary>
            Gets the distribution's mode
            </summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ExponentialDistribution.Variance">
            <summary>
            Gets the distribution's variance
            </summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ExponentialDistribution.StandardDeviation">
            <summary>
            Gets the distribution's standard deviation
            </summary>
        </member>
        <member name="T:Euclid.Distributions.Continuous.ContinuousDistribution">
            <summary>Abstract class base for continuous distributions</summary>
        </member>
        <member name="F:Euclid.Distributions.Continuous.ContinuousDistribution._randomSource">
            <summary>The random number generator</summary>
        </member>
        <member name="F:Euclid.Distributions.Continuous.ContinuousDistribution._support">
            <summary>The distribution's support </summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ContinuousDistribution.Entropy">
            <summary>Gets the distribution's entropy</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ContinuousDistribution.Support">
            <summary>Gets the distribution's support</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ContinuousDistribution.Mean">
            <summary>Gets the distribution's mean</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ContinuousDistribution.Median">
            <summary>Gets the distribution's median</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ContinuousDistribution.Mode">
            <summary>Gets the distribution's mode</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ContinuousDistribution.Skewness">
            <summary>Gets the distribution's skewness</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ContinuousDistribution.StandardDeviation">
            <summary>Gets the distribution's standard deviation</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ContinuousDistribution.Variance">
            <summary>Gets the distribution's variance</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.ContinuousDistribution.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples
            </summary>
        </member>
        <member name="M:Euclid.Distributions.Continuous.ContinuousDistribution.CumulativeDistribution(System.Double)">
            <summary>Computes the cumulative distribution(CDF) of the distribution at x, i.e.P(X ≤ x)</summary>
            <param name="x">the location at which to compute the function</param>
            <returns>a double</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.ContinuousDistribution.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function
            </summary>
            <param name="p">the target probablity</param>
            <returns>a double</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.ContinuousDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Computes the probability density of the distribution(PDF) at x, i.e. ∂P(X ≤ x)/∂x
            </summary>
            <param name="x">The location at which to compute the density</param>
            <returns>a <c>double</c></returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.ContinuousDistribution.ProbabilityLnDensity(System.Double)">
            <summary>Computes the probability density function's logarithm at x</summary>
            <param name="x">the location at which to compute the density</param>
            <returns>a double</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.ContinuousDistribution.Sample(System.Int32)">
            <summary>
            Generates a sequence of samples from the normal distribution using th algorithm
            </summary>
            <param name="size">the sample's size</param>
            <returns>an array of double</returns>
        </member>
        <member name="T:Euclid.Distributions.Continuous.TruncatedNormalDistribution">
            <summary>
            Truncated normal distribution class
            </summary>
        </member>
        <member name="M:Euclid.Distributions.Continuous.TruncatedNormalDistribution.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Builds a truncated normal distribution
            </summary>
            <param name="mu">the location</param>
            <param name="sigma">the scale</param>
            <param name="a">the interval's lower bound</param>
            <param name="b">the interval's upper bound</param>
        </member>
        <member name="P:Euclid.Distributions.Continuous.TruncatedNormalDistribution.Entropy">
            <summary>Gets the distribution's entropy</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.TruncatedNormalDistribution.Support">
            <summary>Gets the distribution's support</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.TruncatedNormalDistribution.Mean">
            <summary>Gets the distribution's mean</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.TruncatedNormalDistribution.Median">
            <summary>Gets the distribution's median</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.TruncatedNormalDistribution.Mode">
            <summary>Gets the distribution's mode</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.TruncatedNormalDistribution.Skewness">
            <summary>
            Gets the distribution's skewness
            </summary>
            <remarks>using Shah and Jaiswal (1966)</remarks>
        </member>
        <member name="P:Euclid.Distributions.Continuous.TruncatedNormalDistribution.StandardDeviation">
            <summary>Gets the distribution's standard deviation</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.TruncatedNormalDistribution.Variance">
            <summary>Gets the distribution's variance</summary>
        </member>
        <member name="M:Euclid.Distributions.Continuous.TruncatedNormalDistribution.CumulativeDistribution(System.Double)">
            <summary>Computes the cumulative distribution function at x</summary>
            <param name="x">the location at which to compute the function</param>
            <returns>a double</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.TruncatedNormalDistribution.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function
            </summary>
            <param name="p">the target probablity</param>
            <returns>a double</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.TruncatedNormalDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Computes the probability density of the distribution(PDF) at x, i.e. ∂P(X ≤ x)/∂x
            </summary>
            <param name="x">The location at which to compute the density</param>
            <returns>a <c>double</c></returns>
        </member>
        <member name="T:Euclid.Distributions.Continuous.UniformDistribution">
            <summary>
            Uniform distribution class
            </summary>
        </member>
        <member name="M:Euclid.Distributions.Continuous.UniformDistribution.#ctor(System.Double,System.Double)">
            <summary>
            Builds a Uniform distribution
            </summary>
            <param name="a">the support's lower bound</param>
            <param name="b">the support's upper bound</param>
        </member>
        <member name="P:Euclid.Distributions.Continuous.UniformDistribution.Entropy">
            <summary>Gets the distribution's entropy</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.UniformDistribution.Mean">
            <summary>Gets the distribution's mean</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.UniformDistribution.Median">
            <summary>Gets the distribution's median</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.UniformDistribution.Mode">
            <summary>Gets the distribution's mode</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.UniformDistribution.Skewness">
            <summary>Gets the distribution's skewness</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.UniformDistribution.StandardDeviation">
            <summary>Gets the distribution's standard deviation</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.UniformDistribution.Support">
            <summary>Gets the distribution's support</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.UniformDistribution.Variance">
            <summary>Gets the distribution's variance</summary>
        </member>
        <member name="M:Euclid.Distributions.Continuous.UniformDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution(CDF) of the distribution at x, i.e.P(X ≤ x)
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function</param>
            <returns>the cumulative distribution at location x</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.UniformDistribution.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function(InvCDF) for the distribution at the given probability.This is also known as the quantile or percent point function
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density</param>
            <returns>the inverse cumulative density at p</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.UniformDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Computes the probability density of the distribution(PDF) at x, i.e. ∂P(X ≤ x)/∂x
            </summary>
            <param name="x">The location at which to compute the density</param>
            <returns>a <c>double</c></returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.UniformDistribution.Sample(System.Int32)">
            <summary>
            Generates a sequence of samples from the normal distribution using the algorithm
            </summary>
            <param name="numberOfPoints">the sample's size</param>
            <returns>an array of double</returns>
        </member>
        <member name="T:Euclid.Distributions.Continuous.WeibullDistribution">
            <summary>
            Weibull distribution class
            </summary>
        </member>
        <member name="M:Euclid.Distributions.Continuous.WeibullDistribution.#ctor(System.Double,System.Double)">
            <summary>
            Builds a Weibull distribution
            </summary>
            <param name="lambda">the scale</param>
            <param name="k">the shape</param>
        </member>
        <member name="P:Euclid.Distributions.Continuous.WeibullDistribution.Entropy">
            <summary>Gets the distribution's entropy</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.WeibullDistribution.Mean">
            <summary>Gets the distribution's mean</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.WeibullDistribution.Median">
            <summary>Gets the distribution's median</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.WeibullDistribution.Mode">
            <summary>Gets the distribution's mode</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.WeibullDistribution.Skewness">
            <summary>Gets the distribution's skewness</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.WeibullDistribution.StandardDeviation">
            <summary>Gets the distribution's standard deviation</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.WeibullDistribution.Support">
            <summary>Gets the distribution's support</summary>
        </member>
        <member name="P:Euclid.Distributions.Continuous.WeibullDistribution.Variance">
            <summary>Gets the distribution's variance</summary>
        </member>
        <member name="M:Euclid.Distributions.Continuous.WeibullDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution(CDF) of the distribution at x, i.e.P(X ≤ x)
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function</param>
            <returns>the cumulative distribution at location x</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.WeibullDistribution.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function(InvCDF) for the distribution at the given probability.This is also known as the quantile or percent point function
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density</param>
            <returns>the inverse cumulative density at p</returns>
        </member>
        <member name="M:Euclid.Distributions.Continuous.WeibullDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Computes the probability density of the distribution(PDF) at x, i.e. ∂P(X ≤ x)/∂x
            </summary>
            <param name="x">The location at which to compute the density</param>
            <returns>a <c>double</c></returns>
        </member>
        <member name="T:Euclid.Distributions.EmpiricUnivariateDistribution">
            <summary>
            Empiric univariate distribution based on kernel functions
            </summary>
        </member>
        <member name="M:Euclid.Distributions.EmpiricUnivariateDistribution.Create(System.Double[],System.Double[],System.Double,Euclid.Distributions.Continuous.Kernels.IDensityKernel)">
            <summary>
            Creates a new empiric univariate distribution
            </summary>
            <param name="weights">the weights</param>
            <param name="values">the values</param>
            <param name="h">the bandwidth</param>
            <param name="kernel">the kernel function</param>
            <returns>a <c>EmpiricUnivariateDistribution</c></returns>
        </member>
        <member name="P:Euclid.Distributions.EmpiricUnivariateDistribution.Median">
            <summary>Gets the distribution's median</summary>
        </member>
        <member name="P:Euclid.Distributions.EmpiricUnivariateDistribution.Mean">
            <summary>Gets the distribution's mean</summary>
        </member>
        <member name="P:Euclid.Distributions.EmpiricUnivariateDistribution.Mode">
            <summary>Gets the distribution's mode</summary>
        </member>
        <member name="P:Euclid.Distributions.EmpiricUnivariateDistribution.StandardDeviation">
            <summary>Gets the distribution's standard deviation</summary>
        </member>
        <member name="P:Euclid.Distributions.EmpiricUnivariateDistribution.Variance">
            <summary>Gets the distribution's variance</summary>
        </member>
        <member name="P:Euclid.Distributions.EmpiricUnivariateDistribution.Support">
            <summary>Gets the distribution's support</summary>
        </member>
        <member name="P:Euclid.Distributions.EmpiricUnivariateDistribution.Skewness">
            <summary>Gets the distribution's skewness</summary>
        </member>
        <member name="P:Euclid.Distributions.EmpiricUnivariateDistribution.Entropy">
            <summary>Gets the distribution's entropy</summary>
        </member>
        <member name="M:Euclid.Distributions.EmpiricUnivariateDistribution.CumulativeDistribution(System.Double)">
            <summary>Computes the cumulative distribution(CDF) of the distribution at x, i.e.P(X ≤ x)</summary>
            <param name="x">the location at which to compute the function</param>
            <returns>a double</returns>
        </member>
        <member name="M:Euclid.Distributions.EmpiricUnivariateDistribution.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function
            </summary>
            <param name="p">the target probablity</param>
            <returns>a double</returns>
        </member>
        <member name="M:Euclid.Distributions.EmpiricUnivariateDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Computes the probability density of the distribution(PDF) at x, i.e. ∂P(X ≤ x)/∂x
            </summary>
            <param name="x">The location at which to compute the density</param>
            <returns>a <c>double</c></returns>
        </member>
        <member name="T:Euclid.Distributions.IDistribution">
            <summary>Interface for all continuous distributions</summary>
        </member>
        <member name="M:Euclid.Distributions.IDistribution.CumulativeDistribution(System.Double)">
            <summary>Evaluates the cumulative distribution function (left hand side)</summary>
            <param name="x">the argument</param>
            <returns>a double</returns>
        </member>
        <member name="M:Euclid.Distributions.IDistribution.InverseCumulativeDistribution(System.Double)">
            <summary>
            Evaluates the cumulative distribution's antecedant for a given probability
            </summary>
            <param name="p">the probability</param>
            <returns>a double</returns>
        </member>
        <member name="M:Euclid.Distributions.IDistribution.ProbabilityDensity(System.Double)">
            <summary>Evaluates the probability density function</summary>
            <param name="x">the argument</param>
            <returns>a double</returns>
        </member>
        <member name="M:Euclid.Distributions.IDistribution.ProbabilityLnDensity(System.Double)">
            <summary>
            Evaluates the log of the probability density function
            </summary>
            <param name="x">the argument</param>
            <returns>a double</returns>
        </member>
        <member name="P:Euclid.Distributions.IDistribution.Entropy">
            <summary>
            Returns the distribution's entropy
            </summary>
        </member>
        <member name="P:Euclid.Distributions.IDistribution.Support">
            <summary>Returns the distribution's support</summary>
        </member>
        <member name="P:Euclid.Distributions.IDistribution.Mean">
            <summary>
            Returns the distribution's mean
            </summary>
        </member>
        <member name="P:Euclid.Distributions.IDistribution.Median">
            <summary>
            Returns the distribution's median
            </summary>
        </member>
        <member name="P:Euclid.Distributions.IDistribution.Mode">
            <summary>Returns the distribution's mode</summary>
        </member>
        <member name="P:Euclid.Distributions.IDistribution.Skewness">
            <summary>Returns the distribution's skewness</summary>
        </member>
        <member name="P:Euclid.Distributions.IDistribution.StandardDeviation">
            <summary>Returns the distribution's standard deviation</summary>
        </member>
        <member name="P:Euclid.Distributions.IDistribution.Variance">
            <summary>Returns the distribution's variance</summary>
        </member>
        <member name="T:Euclid.Helpers.Arrays">
            <summary>
            Helper class for generic array manipulations
            </summary>
        </member>
        <member name="M:Euclid.Helpers.Arrays.Clone``1(``0[])">
            <summary>
            clones a generic array
            </summary>
            <typeparam name="T">template type</typeparam>
            <param name="data">the array of data</param>
            <returns>a shallow copy of data</returns>
        </member>
        <member name="M:Euclid.Helpers.Arrays.Clone``1(``0[0:,0:])">
            <summary>
            clones a generic 2D array
            </summary>
            <typeparam name="T">template type</typeparam>
            <param name="data">the 2d array of data</param>
            <returns>a shallow copy of data</returns>
        </member>
        <member name="M:Euclid.Helpers.Arrays.SubArray``1(``0[],System.Int32,System.Int32)">
            <summary>
            Extract a sub array of data
            </summary>
            <typeparam name="T"> template type</typeparam>
            <param name="data">the array from which the data will be extracted</param>
            <param name="index">the starting index</param>
            <param name="length">the number of values to copy</param>
            <returns>the extracted array</returns>
        </member>
        <member name="M:Euclid.Helpers.Arrays.Apply``1(``0[],System.Func{``0,``0})">
            <summary>
            Applies a function to all the values in an arry
            </summary>
            <typeparam name="T">template type</typeparam>
            <param name="data">the array to transform</param>
            <param name="function">the function to apply to the values</param>
            <returns>an array with the transformed data</returns>
        </member>
        <member name="T:Euclid.Helpers.Geodesic.Coordinates">
            <summary>
            Coordinates class, used to carry GPS coordinates and altitude in meters
            </summary>
        </member>
        <member name="M:Euclid.Helpers.Geodesic.Coordinates.#ctor(System.Double,System.Double,System.Double)">
            <summary>Builds a <c>Coordinates</c></summary>
            <param name="latitude">the latitude</param>
            <param name="longitude">the longitude</param>
            <param name="altitude">the altitude</param>
        </member>
        <member name="P:Euclid.Helpers.Geodesic.Coordinates.Latitude">
            <summary>Gets he geodesic latitude (negative in the southern hemisphere)</summary>
        </member>
        <member name="P:Euclid.Helpers.Geodesic.Coordinates.Longitude">
            <summary>Gets the geodesic longitude</summary>
        </member>
        <member name="P:Euclid.Helpers.Geodesic.Coordinates.Altitude">
            <summary>Gets the altitude in meters</summary>
        </member>
        <member name="T:Euclid.Helpers.Geodesic.Ellipsoid">
            <summary>Ellipsoid class, used for distance calculations</summary>
        </member>
        <member name="F:Euclid.Helpers.Geodesic.Ellipsoid.WorldGeodeticSystem84">
            <summary>The World Geodetic System 1984</summary>
        </member>
        <member name="F:Euclid.Helpers.Geodesic.Ellipsoid.GeodeticReferenceSystem80">
            <summary>The Geodesic Reference System 1980</summary>
        </member>
        <member name="F:Euclid.Helpers.Geodesic.Ellipsoid.GeodeticReferenceSystem67">
            <summary>The Geodesic Reference System 1967</summary>
        </member>
        <member name="F:Euclid.Helpers.Geodesic.Ellipsoid.Clarke1880">
            <summary>The Clarke1880 ellipsoid parameters</summary>
        </member>
        <member name="P:Euclid.Helpers.Geodesic.Ellipsoid.EquatorialRadius">
            <summary>Gets the semi-major axis of the ellipsoid</summary>
        </member>
        <member name="P:Euclid.Helpers.Geodesic.Ellipsoid.PolarRadius">
            <summary>Gets the semi-minor axis of the ellipsoid</summary>
        </member>
        <member name="P:Euclid.Helpers.Geodesic.Ellipsoid.Flattening">
            <summary>Gets the flattening of the ellipsoid</summary>
        </member>
        <member name="T:Euclid.Helpers.Geodesic.Helper">
            <summary>Used to calculate distances on the surface of earth</summary>
        </member>
        <member name="M:Euclid.Helpers.Geodesic.Helper.SphericalDistance(Euclid.Helpers.Geodesic.Coordinates,Euclid.Helpers.Geodesic.Coordinates)">
            <summary>Calculates the distance (in meters) between two Coordinates</summary>
            <param name="point1">The first point</param>
            <param name="point2">The second point</param>
            <returns>the distance between the points (expressed in meters)</returns>
        </member>
        <member name="M:Euclid.Helpers.Geodesic.Helper.EllipsoidDistance(Euclid.Helpers.Geodesic.Ellipsoid,Euclid.Helpers.Geodesic.Coordinates,Euclid.Helpers.Geodesic.Coordinates)">
            <summary>Calculates the distance (in meters) between two Coordinates</summary>
            <param name="ellipsoid">The ellipsoid representation of the Earth</param>
            <param name="point1">The first point</param>
            <param name="point2">The second point</param>
            <returns>the distance between the points (expressed in meters)</returns>
        </member>
        <member name="T:Euclid.Helpers.Parser">
            <summary>
            Parser helper class
            </summary>
        </member>
        <member name="M:Euclid.Helpers.Parser.Parse``1(System.String)">
            <summary>
            Parses any data generic type when possible
            </summary>
            <typeparam name="T">the generic type</typeparam>
            <param name="text"></param>
            <returns>a T</returns>
        </member>
        <member name="T:Euclid.Histograms.Bound">
            <summary>
            Bound class : mainly used in intervals
            </summary>
        </member>
        <member name="M:Euclid.Histograms.Bound.#ctor(System.Double,System.Boolean)">
            <summary>
            Builds a bound
            </summary>
            <param name="value">the value</param>
            <param name="isIncluded">specifies whether this value is included or not</param>
        </member>
        <member name="P:Euclid.Histograms.Bound.Value">
            <summary>
            Gets the bound's value
            </summary>
        </member>
        <member name="P:Euclid.Histograms.Bound.IsIncluded">
            <summary>
            Gets the bound's status
            </summary>
        </member>
        <member name="M:Euclid.Histograms.Bound.op_LessThan(Euclid.Histograms.Bound,System.Double)">
            <summary>
            Compares a <c>Bound</c> to a double
            </summary>
            <param name="b">the left hand side <c>Bound</c></param>
            <param name="x">the right hand side double</param>
            <returns><c>true</c> if the Bound is lower, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Euclid.Histograms.Bound.op_LessThan(System.Double,Euclid.Histograms.Bound)">
            <summary>
            Compares a double to a <c>Bound</c>
            </summary>
            <param name="x">the left hand side double</param>
            <param name="b">the right hand side <c>Bound</c> </param>
            <returns><c>true</c> if the Bound if higher, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Euclid.Histograms.Bound.op_GreaterThan(Euclid.Histograms.Bound,System.Double)">
            <summary>
            Compares a Bound to a double
            </summary>
            <param name="b">the left hand side <c>Bound</c></param>
            <param name="x">the right hand side double</param>
            <returns><c>true</c> if the Bound is higher, <c>false</c> otherwise </returns>
        </member>
        <member name="M:Euclid.Histograms.Bound.op_GreaterThan(System.Double,Euclid.Histograms.Bound)">
            <summary>
            Compares a Bound to a double
            </summary>
            <param name="x">the left hand side double</param>
            <param name="b">the right hand side Bound</param>
            <returns><c>true</c> if the Bound is lower, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Euclid.Histograms.Bound.op_LessThanOrEqual(Euclid.Histograms.Bound,System.Double)">
            <summary>
            Compares a Bound to a double
            </summary>
            <param name="b">the left hand side Bound</param>
            <param name="x">the right hand side double</param>
            <returns><c>true</c> if Bound is lower or equal, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Euclid.Histograms.Bound.op_GreaterThanOrEqual(Euclid.Histograms.Bound,System.Double)">
            <summary>
            Compares a Bound to a double
            </summary>
            <param name="b">the left hand side Bound</param>
            <param name="x">the right hand side double</param>
            <returns><c>true</c> if Bound is greater or equal, <c>false</c> otherwise </returns>
        </member>
        <member name="M:Euclid.Histograms.Bound.op_LessThanOrEqual(System.Double,Euclid.Histograms.Bound)">
            <summary>
            Compares a double to a Bound
            </summary>
            <param name="x">the left hand side double</param>
            <param name="b">the right hand side Bound</param>
            <returns><c>true</c> if the Bound is greater or equal, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Euclid.Histograms.Bound.op_GreaterThanOrEqual(System.Double,Euclid.Histograms.Bound)">
            <summary>
            Compares a double to a Bound
            </summary>
            <param name="x">the left hand side double</param>
            <param name="b">the right hand side Bound</param>
            <returns><c>true</c> if the Bound is lower or equal, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Euclid.Histograms.Bound.op_Equality(Euclid.Histograms.Bound,System.Double)">
            <summary>
            Checks if a bound equals a double
            </summary>
            <param name="b">the left hand side Bound</param>
            <param name="x">the right hand side double</param>
            <returns><c>true</c> if they equal, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Euclid.Histograms.Bound.op_Equality(System.Double,Euclid.Histograms.Bound)">
            <summary>
            Checks if a bound equals a double
            </summary>
            <param name="b">the right hand side Bound</param>
            <param name="x">the left hand side double</param>
            <returns><c>true</c> if they equal, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Euclid.Histograms.Bound.op_Inequality(Euclid.Histograms.Bound,System.Double)">
            <summary>
            Compares a Bound to a double
            </summary>
            <param name="b">the left hand side Bound</param>
            <param name="x">the right hand side double</param>
            <returns><c>true</c> if the Bound doesnot match, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Euclid.Histograms.Bound.op_Inequality(System.Double,Euclid.Histograms.Bound)">
            <summary>
            Compares a Bound to a double
            </summary>
            <param name="x">the left hand side double</param>
            <param name="b">the right hand side Bound</param>
            <returns><c>true</c> if the Bound doesnt match, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Euclid.Histograms.Bound.op_Equality(Euclid.Histograms.Bound,Euclid.Histograms.Bound)">
            <summary>
            Checks the equality between two bounds (reference equality then null coincidence, then content coincidence)
            </summary>
            <param name="b1">the left hand side <c>Bound</c></param>
            <param name="b2">the right hand side <c>Bound</c></param>
            <returns>a bool</returns>
        </member>
        <member name="M:Euclid.Histograms.Bound.op_Inequality(Euclid.Histograms.Bound,Euclid.Histograms.Bound)">
            <summary>
            Checks the inequality between two bounds (based on the equal comparer)
            </summary>
            <param name="b1"></param>
            <param name="b2"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Histograms.Bound.op_LessThan(Euclid.Histograms.Bound,Euclid.Histograms.Bound)">
            <summary>Compares two Bounds</summary>
            <param name="b1">the left hand side Bound</param>
            <param name="b2">the right hand side Bound</param>
            <returns><c>true</c> if b1 is lower, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Euclid.Histograms.Bound.op_GreaterThan(Euclid.Histograms.Bound,Euclid.Histograms.Bound)">
            <summary>
            Compares two Bounds
            </summary>
            <param name="b1">the left hand side Bound</param>
            <param name="b2">the right hand side Bound</param>
            <returns><c>true</c> if b1 is higher, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Euclid.Histograms.Bound.op_LessThanOrEqual(Euclid.Histograms.Bound,Euclid.Histograms.Bound)">
            <summary>
            Compares two Bounds
            </summary>
            <param name="b1">the left hand side Bound</param>
            <param name="b2">the right hand side Bound</param>
            <returns><c>true</c> if b1 is lower or equal, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Euclid.Histograms.Bound.op_GreaterThanOrEqual(Euclid.Histograms.Bound,Euclid.Histograms.Bound)">
            <summary>
            Compares two Bounds
            </summary>
            <param name="b1">the left hand side Bound</param>
            <param name="b2">the right hand side Bound</param>
            <returns><c>true</c> if b1 is greater or equal, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Euclid.Histograms.Bound.Equals(Euclid.Histograms.Bound)">
            <summary>
            Checks the equality to another <c>Bound</c>
            </summary>
            <param name="other">the other <c>Bound</c></param>
            <returns>a bool</returns>
        </member>
        <member name="M:Euclid.Histograms.Bound.Equals(System.Object)">
            <summary>
            Checks the equality to an object (inherited from IEquatable)
            </summary>
            <param name="other">the object </param>
            <returns>a bool</returns>
        </member>
        <member name="M:Euclid.Histograms.Bound.GetHashCode">
            <summary>
            Returns this instance's hashcode
            </summary>
            <returns>an int</returns>
        </member>
        <member name="M:Euclid.Histograms.Bound.CompareTo(Euclid.Histograms.Bound)">
            <summary>
            Compares this instance to another <c>Bound</c>
            </summary>
            <param name="other">the <c>Bound</c> to compare to</param>
            <returns>-1 if &lt;, +1 if &gt;, 0 otherwise</returns>
        </member>
        <member name="T:Euclid.Histograms.Interval">
            <summary>
            Interval representation class
            </summary>
        </member>
        <member name="M:Euclid.Histograms.Interval.#ctor(System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Builds an interval
            </summary>
            <param name="lowerBound">the interval's lower bound</param>
            <param name="upperBound">the interval's upper bound</param>
            <param name="lowerIncluded">the lower bound's status </param>
            <param name="upperIncluded">the upper bound's status</param>
        </member>
        <member name="M:Euclid.Histograms.Interval.#ctor(Euclid.Histograms.Bound,Euclid.Histograms.Bound)">
            <summary>
            Builds an interval
            </summary>
            <param name="lower">the lower bound</param>
            <param name="upper">the upper bound</param>
        </member>
        <member name="M:Euclid.Histograms.Interval.#ctor(Euclid.Histograms.Interval)">
            <summary>
            Duplicates an <c>Interval</c>
            </summary>
            <param name="interval">the <c>Interval</c> to copy</param>
        </member>
        <member name="P:Euclid.Histograms.Interval.LowerBound">
            <summary>Gets the interval's lower bound</summary>
        </member>
        <member name="P:Euclid.Histograms.Interval.UpperBound">
            <summary>Gets the interval's upper bound</summary>
        </member>
        <member name="P:Euclid.Histograms.Interval.Clone">
            <summary>Gets a deep copy of the interval</summary>
        </member>
        <member name="M:Euclid.Histograms.Interval.Contains(System.Double)">
            <summary>
            Checks if the double is inside the interval
            </summary>
            <param name="x">the value</param>
            <returns><c>true</c> if x is inside the interval, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Euclid.Histograms.Interval.ToString">
            <summary>
            Gives a string representation of the Interval
            </summary>
            <returns>a string</returns>
        </member>
        <member name="M:Euclid.Histograms.Interval.Intersection(Euclid.Histograms.Interval[])">
            <summary>Returns the intersection of a group of intervals</summary>
            <param name="intervals">the Intervals to intersect</param>
            <returns>an Interval</returns>
        </member>
        <member name="T:Euclid.Histograms.Histogram">
            <summary>
            Histogram class
            </summary>
        </member>
        <member name="M:Euclid.Histograms.Histogram.#ctor(Euclid.Histograms.Interval[])">
            <summary>
            Builds an <c>Histogram</c>
            </summary>
            <param name="intervals">the initial intervals</param>
        </member>
        <member name="P:Euclid.Histograms.Histogram.Count">
            <summary>Gets the number of intervals</summary>
        </member>
        <member name="P:Euclid.Histograms.Histogram.TotalItems">
            <summary>Gets the total number of items in the histogram</summary>
        </member>
        <member name="P:Euclid.Histograms.Histogram.Intervals">
            <summary>
            Gets the intervals
            </summary>
        </member>
        <member name="P:Euclid.Histograms.Histogram.Item(System.Int32)">
            <summary>Gets the number of items in the i-th bucket</summary>
            <param name="bucket">the bucket's index</param>
            <returns>an int</returns>
        </member>
        <member name="M:Euclid.Histograms.Histogram.Tabulate(System.Double)">
            <summary>Tabulates the value into to this instance</summary>
            <param name="value">the value</param>
        </member>
        <member name="M:Euclid.Histograms.Histogram.Tabulate(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>Tabulates these values into to this instance</summary>
            <param name="values">the value</param>
        </member>
        <member name="M:Euclid.Histograms.Histogram.Create(System.Double,System.Double,System.Int32)">
            <summary>Creates an <c>Histogram</c> with regular buckets</summary>
            <param name="lowerBound">the support's lower bound</param>
            <param name="upperBound">the support's upper bound</param>
            <param name="numberOfIntervals">the number of intervals</param>
            <returns>an <c>Histogram</c></returns>
        </member>
        <member name="T:Euclid.IndexedSeries.Slice`3">
            <summary>Class representing a Slice of synchronized data</summary>
            <typeparam name="T">the legend type</typeparam>
            <typeparam name="U">the data type</typeparam>
            <typeparam name="V">the label type</typeparam>
        </member>
        <member name="P:Euclid.IndexedSeries.Slice`3.Legends">
            <summary>Gets the legends. Inherited (in this case, the legend is packaged into an array)</summary>
        </member>
        <member name="P:Euclid.IndexedSeries.Slice`3.Legend">
            <summary>Gets and sets the legend</summary>
        </member>
        <member name="P:Euclid.IndexedSeries.Slice`3.Labels">
            <summary>Returns the labels</summary>
        </member>
        <member name="P:Euclid.IndexedSeries.Slice`3.Columns">
            <summary>Returns the number of columns</summary>
        </member>
        <member name="P:Euclid.IndexedSeries.Slice`3.Rows">
            <summary>Returns the number of rows</summary>
        </member>
        <member name="P:Euclid.IndexedSeries.Slice`3.Data">
            <summary> Gets a deep copy of the data</summary>
        </member>
        <member name="M:Euclid.IndexedSeries.Slice`3.Clone">
            <summary>Clones the slice</summary>
            <returns>a <c>Slice</c></returns>
        </member>
        <member name="M:Euclid.IndexedSeries.Slice`3.RemoveColumnAt(`2)">
            <summary>Remove the data for a given label</summary>
            <param name="label">the label</param>
        </member>
        <member name="P:Euclid.IndexedSeries.Slice`3.Item(System.Int32)">
            <summary>Gets and sets the i-th data </summary>
            <param name="i">the index</param>
            <returns>a data point</returns>
        </member>
        <member name="P:Euclid.IndexedSeries.Slice`3.Item(`2)">
            <summary>Gets and sets the data for a given label</summary>
            <param name="v">the target label</param>
            <returns>a data point</returns>
        </member>
        <member name="M:Euclid.IndexedSeries.Slice`3.Add(`2,`1)">
            <summary>Adds a data to the slice</summary>
            <param name="label">the new label</param>
            <param name="value">the new value</param>
        </member>
        <member name="M:Euclid.IndexedSeries.Slice`3.ApplyOnData(System.Func{`1,`1})">
            <summary>Applies a function to the data</summary>
            <param name="function">the function</param>
        </member>
        <member name="M:Euclid.IndexedSeries.Slice`3.GetLabel(System.Int32)">
            <summary>Gets the i-th label's value</summary>
            <param name="i">the index</param>
            <returns>a label</returns>
        </member>
        <member name="M:Euclid.IndexedSeries.Slice`3.SetLabel(System.Int32,`2)">
            <summary>Sets the i-th label's value</summary>
            <param name="i">the index</param>
            <param name="value">the new value</param>
        </member>
        <member name="M:Euclid.IndexedSeries.Slice`3.ToXml(System.Xml.XmlWriter)">
            <summary>Serializes the slice to Xml </summary>
            <param name="writer">the <c>XmlWriter</c></param>
        </member>
        <member name="M:Euclid.IndexedSeries.Slice`3.ToCSV">
            <summary>Builds a string representation the content of the slice </summary>
            <returns>a <c>String</c></returns>
        </member>
        <member name="M:Euclid.IndexedSeries.Slice`3.FromCSV(System.String)">
            <summary>Fills a <c>Slice</c> from a string</summary>
            <param name="text">the <c>String</c> content</param>
        </member>
        <member name="M:Euclid.IndexedSeries.Slice`3.Create(System.Xml.XmlNode)">
            <summary>De-serializes the slice from a Xml node</summary>
            <param name="node">the <c>XmlNode</c></param>
        </member>
        <member name="T:Euclid.IndexedSeries.Series`3">
            <summary>Class representing a Series of data</summary>
            <typeparam name="T">the legend type</typeparam>
            <typeparam name="U">the data type</typeparam>
            <typeparam name="V">the label type</typeparam>
        </member>
        <member name="M:Euclid.IndexedSeries.Series`3.#ctor(`2,`0[],`1[])">
            <summary>Builds a <c>Series</c></summary>
            <param name="label">the label</param>
            <param name="legends">the legends</param>
            <param name="data">the data</param>
        </member>
        <member name="P:Euclid.IndexedSeries.Series`3.Legends">
            <summary>Returns the legends of the <c>Series</c></summary>
        </member>
        <member name="P:Euclid.IndexedSeries.Series`3.Labels">
            <summary>Returns the labels of the <c>Series</c> (in this case, it is the only label)</summary>
        </member>
        <member name="P:Euclid.IndexedSeries.Series`3.Data">
            <summary>Returns the data of the <c>Series</c></summary>
        </member>
        <member name="P:Euclid.IndexedSeries.Series`3.Label">
            <summary>Gets and sets the label</summary>
        </member>
        <member name="P:Euclid.IndexedSeries.Series`3.Columns">
            <summary>Returns the number of columns of the <c>Series</c> (in this case, it is one)</summary>
        </member>
        <member name="P:Euclid.IndexedSeries.Series`3.Rows">
            <summary>Returns the number of rows of the <c>Series</c></summary>
        </member>
        <member name="M:Euclid.IndexedSeries.Series`3.Clone">
            <summary>Clones the <c>Series</c></summary>
            <returns>a <c>Series</c></returns>
        </member>
        <member name="P:Euclid.IndexedSeries.Series`3.Item(System.Int32)">
            <summary>Gets and sets the i-th data of the <c>Series</c></summary>
            <param name="index">the index</param>
            <returns>a data point</returns>
        </member>
        <member name="P:Euclid.IndexedSeries.Series`3.Item(`0)">
            <summary>Gets and sets the data for a given legend</summary>
            <param name="t">the legend</param>
            <returns>a data point</returns>
        </member>
        <member name="M:Euclid.IndexedSeries.Series`3.RemoveRowAt(`0)">
            <summary>Removes the row for a given legend</summary>
            <param name="t">the legend</param>
        </member>
        <member name="M:Euclid.IndexedSeries.Series`3.Add(`0,`1)">
            <summary>Adds a line to the <c>Series</c></summary>
            <param name="legend">the new legend</param>
            <param name="value">the new data</param>
        </member>
        <member name="M:Euclid.IndexedSeries.Series`3.Remove(System.Func{`0,`1,System.Boolean})">
            <summary>Removes all the data-points that fit a predicate</summary>
            <param name="predicate">the predicate</param>
        </member>
        <member name="M:Euclid.IndexedSeries.Series`3.ApplyOnData(System.Func{`1,`1})">
            <summary>Applies a function to all the data</summary>
            <param name="function">the function</param>
        </member>
        <member name="M:Euclid.IndexedSeries.Series`3.ApplyOnLegends(System.Func{`0,`0})">
            <summary>Applies a function to all the legends</summary>
            <param name="function">the function</param>
        </member>
        <member name="M:Euclid.IndexedSeries.Series`3.Sum(System.Func{`1,`1})">
            <summary>Returns the sum of the data passed through a function</summary>
            <param name="function">the function</param>
            <returns>a scalar</returns>
        </member>
        <member name="M:Euclid.IndexedSeries.Series`3.GetLegend(System.Int32)">
            <summary>Gets the i-th legend value</summary>
            <param name="index">the index</param>
            <returns>a legend value</returns>
        </member>
        <member name="M:Euclid.IndexedSeries.Series`3.SetLegend(System.Int32,`0)">
            <summary>Sets the i-th legend value </summary>
            <param name="index">the index</param>
            <param name="value">the new legend value</param>
        </member>
        <member name="M:Euclid.IndexedSeries.Series`3.ToXml(System.Xml.XmlWriter)">
            <summary>Serializes the <c>Series</c> to Xml </summary>
            <param name="writer">the <c>XmlWriter</c></param>
        </member>
        <member name="M:Euclid.IndexedSeries.Series`3.ToCSV">
            <summary>Builds a string representing the content of the <c>Series</c></summary>
            <returns>a <c>String</c></returns>
        </member>
        <member name="M:Euclid.IndexedSeries.Series`3.FromCSV(System.String)">
            <summary>Fills a <c>Series</c> from a string</summary>
            <param name="text">the <c>String</c> content</param>
        </member>
        <member name="M:Euclid.IndexedSeries.Series`3.op_Addition(Euclid.IndexedSeries.Series{`0,`1,`2},Euclid.IndexedSeries.Series{`0,`1,`2})">
            <summary>Adds two <c>Series</c></summary>
            <param name="ts1">the left hand side <c>Series</c></param>
            <param name="ts2">the right hand side <c>Series</c></param>
            <returns>a <c>Series</c></returns>
        </member>
        <member name="M:Euclid.IndexedSeries.Series`3.op_Subtraction(Euclid.IndexedSeries.Series{`0,`1,`2},Euclid.IndexedSeries.Series{`0,`1,`2})">
            <summary>Substracts one <c>Series</c> to another</summary>
            <param name="ts1">the left hand side <c>Series</c></param>
            <param name="ts2">the right hand side <c>Series</c></param>
            <returns>a <c>Series</c></returns>
        </member>
        <member name="M:Euclid.IndexedSeries.Series`3.op_Multiply(Euclid.IndexedSeries.Series{`0,`1,`2},`1)">
            <summary>Multiplies the <c>Series</c> by a factor</summary>
            <param name="ts">the <c>Series</c></param>
            <param name="factor">the factor </param>
            <returns>a <c>Series</c></returns>
        </member>
        <member name="M:Euclid.IndexedSeries.Series`3.op_Multiply(`1,Euclid.IndexedSeries.Series{`0,`1,`2})">
            <summary>Multiplies the <c>Series</c> by a factor</summary>
            <param name="factor">the factor</param>
            <param name="ts">the <c>Series</c></param>
            <returns>a <c>Series</c></returns>
        </member>
        <member name="M:Euclid.IndexedSeries.Series`3.op_Division(Euclid.IndexedSeries.Series{`0,`1,`2},`1)">
            <summary>Divides the <c>Series</c> by a factor</summary>
            <param name="ts">the <c>Series</c></param>
            <param name="factor">the factor</param>
            <returns>a <c>Series</c></returns>
        </member>
        <member name="M:Euclid.IndexedSeries.Series`3.op_Addition(Euclid.IndexedSeries.Series{`0,`1,`2},`1)">
            <summary>Adds a scalar to a <c>Series</c></summary>
            <param name="ts">the <c>Series</c></param>
            <param name="amount">the number</param>
            <returns>a <c>Series</c></returns>
        </member>
        <member name="M:Euclid.IndexedSeries.Series`3.op_Addition(`1,Euclid.IndexedSeries.Series{`0,`1,`2})">
            <summary>Adds a scalar to a <c>Series</c></summary>
            <param name="amount">the scalar</param>
            <param name="ts">the <c>Series</c></param>
            <returns>a <c>Series</c></returns>
        </member>
        <member name="M:Euclid.IndexedSeries.Series`3.op_Subtraction(Euclid.IndexedSeries.Series{`0,`1,`2},`1)">
            <summary>Substracts a scalar to a <c>Series</c></summary>
            <param name="ts">the <c>Series</c></param>
            <param name="amount">the scalar</param>
            <returns>a <c>Series</c></returns>
        </member>
        <member name="M:Euclid.IndexedSeries.Series`3.Create(System.Int32)">
            <summary>Builds an empty <c>Series</c></summary>
            <param name="rows">the size of the <c>Series</c></param>
        </member>
        <member name="M:Euclid.IndexedSeries.Series`3.Create(System.Xml.XmlNode)">
            <summary>Builds a <c>Series</c> from its serialized form</summary>
            <param name="node">the <c>XmlNode</c></param>
        </member>
        <member name="T:Euclid.IndexedSeries.DataFrame`3">
            <summary>
            Class representing a DataFrame of synchronized data
            </summary>
            <typeparam name="T">the legend type</typeparam>
            <typeparam name="U">the data type</typeparam>
            <typeparam name="V">the label type</typeparam>
        </member>
        <member name="M:Euclid.IndexedSeries.DataFrame`3.Create(System.Xml.XmlNode)">
            <summary>
            Builds a <c>DataFrame</c> from its serialized form
            </summary>
            <param name="dataFrameNode">the <c>XmlNode</c></param>
        </member>
        <member name="M:Euclid.IndexedSeries.DataFrame`3.Create(System.Collections.Generic.IEnumerable{`2},System.Collections.Generic.IEnumerable{`0},`1[0:,0:])">
            <summary>
            Builds a <c>DataFrame</c>
            </summary>
            <param name="labels">the labels</param>
            <param name="legends">the legends</param>
            <param name="data">the data</param>
        </member>
        <member name="M:Euclid.IndexedSeries.DataFrame`3.Create(System.Collections.Generic.IEnumerable{Euclid.IndexedSeries.Slice{`0,`1,`2}})">
            <summary>
            Builds a <c>DataFrame</c>
            </summary>
            <param name="slices">the slices</param>
        </member>
        <member name="M:Euclid.IndexedSeries.DataFrame`3.Create(System.Int32,System.Int32)">
            <summary>
            Builds an empty <c>DataFrame</c>
            </summary>
            <param name="rows">the number of rows</param>
            <param name="columns">the number of columns</param>
        </member>
        <member name="P:Euclid.IndexedSeries.DataFrame`3.Legends">
            <summary>
            Gets the legends
            </summary>
        </member>
        <member name="P:Euclid.IndexedSeries.DataFrame`3.Labels">
            <summary>
            Gets the labels
            </summary>
        </member>
        <member name="P:Euclid.IndexedSeries.DataFrame`3.Columns">
            <summary>
            Gets the number of columns
            </summary>
        </member>
        <member name="P:Euclid.IndexedSeries.DataFrame`3.Rows">
            <summary>
            Returns the number of rows
            </summary>
        </member>
        <member name="P:Euclid.IndexedSeries.DataFrame`3.Data">
            <summary>Gets the data</summary>
        </member>
        <member name="M:Euclid.IndexedSeries.DataFrame`3.Clone">
            <summary>Clones the <c>DataFrame</c></summary>
            <returns>a <c>DataFrame</c></returns>
        </member>
        <member name="M:Euclid.IndexedSeries.DataFrame`3.RemoveColumnAt(`2)">
            <summary>Remove the data for a given label</summary>
            <param name="label">the label</param>
        </member>
        <member name="M:Euclid.IndexedSeries.DataFrame`3.RemoveRowAt(`0)">
            <summary>Removes the row for a given legend</summary>
            <param name="t">the legend</param>
        </member>
        <member name="M:Euclid.IndexedSeries.DataFrame`3.Remove(System.Func{`0,`1,`2,System.Boolean})">
            <summary>Removes all the rows containing a data-point that fits a predicate</summary>
            <param name="predicate">the predicate</param>
        </member>
        <member name="P:Euclid.IndexedSeries.DataFrame`3.Item(System.Int32,System.Int32)">
            <summary>Gets and sets the data for the i-th row and j-th column of the <c>DataFrame</c></summary>
            <param name="i">the row index</param>
            <param name="j">the column index</param>
            <returns>a data point</returns>
        </member>
        <member name="P:Euclid.IndexedSeries.DataFrame`3.Item(`0,`2)">
            <summary>
            Gets and sets the data for a given legend and a given label
            </summary>
            <param name="t">the legend</param>
            <param name="v">the label</param>
            <returns>a data point</returns>
        </member>
        <member name="M:Euclid.IndexedSeries.DataFrame`3.GetSliceAt(`0)">
            <summary>
            Gets the data-point row of the given legend
            </summary>
            <param name="t">the legend</param>
            <returns>a <c>Slice</c></returns>
        </member>
        <member name="M:Euclid.IndexedSeries.DataFrame`3.GetSeriesAt(`2)">
            <summary>
            Gets the data-point column of the given label
            </summary>
            <param name="v">the label</param>
            <returns> a <c>Series</c></returns>
        </member>
        <member name="M:Euclid.IndexedSeries.DataFrame`3.GetRows">
            <summary>
            Gets all the data as an array of <c>Slice</c>
            </summary>
            <returns>an array of <c>Slice</c></returns>
        </member>
        <member name="M:Euclid.IndexedSeries.DataFrame`3.GetColumns">
            <summary>
            Gets all the data as an array of <c>Series</c>
            </summary>
            <returns>an array of <c>Series</c></returns>
        </member>
        <member name="M:Euclid.IndexedSeries.DataFrame`3.GetColumn(System.Int32)">
            <summary>Gets the i-th column of the dataframe</summary>
            <param name="column">the target column</param>
            <returns>a <c>Series</c></returns>
        </member>
        <member name="M:Euclid.IndexedSeries.DataFrame`3.Add(`2,`1[])">
            <summary>
            Adds a column to the <c>DataFrame</c>
            </summary>
            <param name="label">the new column's label</param>
            <param name="column">the new column's data</param>
        </member>
        <member name="M:Euclid.IndexedSeries.DataFrame`3.Add(`2)">
            <summary>
            Adds an empty column to the <c>DataFrame</c>
            </summary>
            <param name="label">the new column's label</param>
        </member>
        <member name="M:Euclid.IndexedSeries.DataFrame`3.ApplyOnData(System.Func{`1,`1})">
            <summary>Applies a function to all the data</summary>
            <param name="function">the function</param>
        </member>
        <member name="M:Euclid.IndexedSeries.DataFrame`3.ApplyOnLegends(System.Func{`0,`0})">
            <summary>Applies a function to all the legends</summary>
            <param name="function">the function</param>
        </member>
        <member name="M:Euclid.IndexedSeries.DataFrame`3.GetLegend(System.Int32)">
            <summary>Gets the i-th legend value</summary>
            <param name="index">the index</param>
            <returns>a legend value</returns>
        </member>
        <member name="M:Euclid.IndexedSeries.DataFrame`3.SetLegend(System.Int32,`0)">
            <summary>Sets the i-th legend value </summary>
            <param name="index">the index</param>
            <param name="value">the new legend value</param>
        </member>
        <member name="M:Euclid.IndexedSeries.DataFrame`3.GetLabel(System.Int32)">
            <summary>Gets the i-th label's value</summary>
            <param name="i">the index</param>
            <returns>a label</returns>
        </member>
        <member name="M:Euclid.IndexedSeries.DataFrame`3.SetLabel(System.Int32,`2)">
            <summary>Sets the i-th label's value</summary>
            <param name="i">the index</param>
            <param name="value">the new value</param>
        </member>
        <member name="M:Euclid.IndexedSeries.DataFrame`3.ToXml(System.Xml.XmlWriter)">
            <summary>Serializes the <c>DataFrame</c> to Xml </summary>
            <param name="writer">the <c>XmlWriter</c></param>
        </member>
        <member name="M:Euclid.IndexedSeries.DataFrame`3.ToCSV">
            <summary>Builds a string representation of the content of the <c>DataFrame</c> </summary>
            <returns>a <c>String</c></returns>
        </member>
        <member name="M:Euclid.IndexedSeries.DataFrame`3.FromCSV(System.String)">
            <summary>Fills a <c>DataFrame</c> from a string</summary>
            <param name="text">the <c>String</c> content</param>
        </member>
        <member name="T:Euclid.IndexedSeries.IIndexedSeries`3">
            <summary>
            Interface for all series : DataFrame, Slice, Series
            </summary>
            <typeparam name="T">the type of legends</typeparam>
            <typeparam name="U">the type of the data</typeparam>
            <typeparam name="V">the type of the labels</typeparam>
        </member>
        <member name="P:Euclid.IndexedSeries.IIndexedSeries`3.Legends">
            <summary>Gets the legends</summary>
        </member>
        <member name="P:Euclid.IndexedSeries.IIndexedSeries`3.Labels">
            <summary> Gets the labels </summary>
        </member>
        <member name="P:Euclid.IndexedSeries.IIndexedSeries`3.Rows">
            <summary>Gets the number of rows</summary>
        </member>
        <member name="P:Euclid.IndexedSeries.IIndexedSeries`3.Columns">
            <summary>Gets the number of columns </summary>
        </member>
        <member name="M:Euclid.IndexedSeries.IIndexedSeries`3.ApplyOnData(System.Func{`1,`1})">
            <summary>Applies a function to the data</summary>
            <param name="function">the function</param>
        </member>
        <member name="T:Euclid.LinearAlgebra.EigenDecomposition">
            <summary>
            Class used to diagonalize symmetric matrices
            </summary>
        </member>
        <member name="M:Euclid.LinearAlgebra.EigenDecomposition.#ctor(Euclid.Matrix)">
            <summary>
            Initiates the class
            </summary>
            <param name="matrix">the <c>Matrix</c> to decompose</param>
        </member>
        <member name="P:Euclid.LinearAlgebra.EigenDecomposition.EigenValues">
            <summary>
            Returns the <c>Complex</c> eigen values of the matrix
            </summary>
        </member>
        <member name="P:Euclid.LinearAlgebra.EigenDecomposition.DiagonalMatrix">
            <summary>
            Returns the diagonal <c>Matrix</c> which is the diagonalized form of the initial matrix
            </summary>
        </member>
        <member name="P:Euclid.LinearAlgebra.EigenDecomposition.EigenVectors">
            <summary>
            Returns a <c>Matrix</c> whose columns are the eigen vectors of the matrix
            </summary>
        </member>
        <member name="M:Euclid.LinearAlgebra.EigenDecomposition.Solve">
            <summary>
            Tridiagonalizes the matrix and then diagonalize it in the complex space
            </summary>
        </member>
        <member name="M:Euclid.LinearAlgebra.EigenDecomposition.SymmetricTridiagonalize">
            <summary>
            Symmetric Householder reduction to tridiagonal form.
            </summary>
        </member>
        <member name="M:Euclid.LinearAlgebra.EigenDecomposition.SymmetricDiagonalize">
            <summary>
            Symmetric tridiagonal QL algorithm.
            </summary>
        </member>
        <member name="M:Euclid.LinearAlgebra.EigenDecomposition.NonsymmetricReduceToHessenberg">
            <summary>
            Nonsymmetric reduction to Hessenberg form.
            </summary>
        </member>
        <member name="M:Euclid.LinearAlgebra.EigenDecomposition.NonsymmetricReduceHessenberToRealSchur">
            <summary>
            Nonsymmetric reduction from Hessenberg to real Schur form.
            </summary>
        </member>
        <member name="T:Euclid.Matrix">
            <summary>
            Matrix of double
            </summary>
        </member>
        <member name="M:Euclid.Matrix.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Builds a rectangular matrix filled with the specified value
            </summary>
            <param name="rows">the number of rows</param>
            <param name="cols">the number of columns</param>
            <param name="value">the value for all the fields of the matrix</param>
        </member>
        <member name="P:Euclid.Matrix.Columns">
            <summary>
            Returns the number of columns of the <c>Matrix</c>
            </summary>
        </member>
        <member name="P:Euclid.Matrix.Rows">
            <summary>
            Returns the number of rows of the <c>Matrix</c>
            </summary>
        </member>
        <member name="P:Euclid.Matrix.IsSquare">
            <summary>
            Specifies whether the <c>Matrix</c> is square
            </summary>
        </member>
        <member name="P:Euclid.Matrix.IsSymetric">
            <summary>
            Specifies whether the <c>Matrix</c> is square and symmetric
            </summary>
        </member>
        <member name="P:Euclid.Matrix.Size">
            <summary>
            Returns the number of values in the <c>Matrix</c>
            </summary>
        </member>
        <member name="P:Euclid.Matrix.Data">
            <summary>
            Returns the data of the matrix as a array of double with the rows one after the other
            </summary>
        </member>
        <member name="P:Euclid.Matrix.Array">
            <summary>Gets the matrix' data as a 2d-array</summary>
        </member>
        <member name="P:Euclid.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Allows reading and modifying the coefficients of the <c>Matrix</c>
            </summary>
            <param name="i">the row</param>
            <param name="j">the column</param>
            <returns>a double value</returns>
        </member>
        <member name="P:Euclid.Matrix.Item(System.Int32)">
            <summary>
            Allows reading and modifying the coefficients of the <c>Matrix</c>
            </summary>
            <param name="i">the coefficient index</param>
            <returns>a double value</returns>
        </member>
        <member name="P:Euclid.Matrix.Clone">
            <summary>
            Returns a deep copy of the <c>Matrix</c>
            </summary>
        </member>
        <member name="P:Euclid.Matrix.L">
            <summary>
            The Lower triangular part of the LU decomposition
            </summary>
        </member>
        <member name="P:Euclid.Matrix.U">
            <summary>
            The Upper triangular part of the LU decomposition
            </summary>
        </member>
        <member name="P:Euclid.Matrix.Determinant">
            <summary>
            Returns the determinant of the <c>Matrix</c>
            </summary>
        </member>
        <member name="P:Euclid.Matrix.Inverse">
            <summary>
            Returns the inverse of the <c>Matrix</c> when possible, null otherwise
            </summary>
        </member>
        <member name="P:Euclid.Matrix.FastInverse">
            <summary>
            Returns the inverse of the <c>Matrix</c> when possible, null otherwise. Done using multithreading !
            </summary>
        </member>
        <member name="P:Euclid.Matrix.CoMatrix">
            <summary>
            Returns the co-matrix of the current matrix
            </summary>
        </member>
        <member name="P:Euclid.Matrix.Trace">
            <summary>
            Returns the trace of the <c>Matrix</c>
            </summary>
        </member>
        <member name="P:Euclid.Matrix.Transpose">
            <summary>
            Returns the transposed <c>Matrix</c>
            </summary>
        </member>
        <member name="P:Euclid.Matrix.FastTranspose">
            <summary>
            Returns the transposed <c>Matrix</c> filled using multithreading
            </summary>
        </member>
        <member name="P:Euclid.Matrix.SymmetricPart">
            <summary>
            Returns the symmetric part of the <c>Matrix</c> ( 1/2 . (A^T + A))
            </summary>
        </member>
        <member name="P:Euclid.Matrix.AntiSymmetricPart">
            <summary>
            Returns the symmetric part of the <c>Matrix</c> (1/2 . (A - A^T))
            </summary>
        </member>
        <member name="P:Euclid.Matrix.Norm1">
            <summary>
            Return the sum of the absolute values
            </summary>
        </member>
        <member name="P:Euclid.Matrix.Norm2">
            <summary>
            Returns the square root of the sum of squares
            </summary>
        </member>
        <member name="P:Euclid.Matrix.NormSup">
            <summary>
            Returns the largest value of the <c>Matrix</c> in absolute value
            </summary>
        </member>
        <member name="P:Euclid.Matrix.SumOfSquares">
            <summary>
            Returns the sum of the squared values
            </summary>
        </member>
        <member name="P:Euclid.Matrix.Sum">
            <summary>
            Returns the sum of the values
            </summary>
        </member>
        <member name="M:Euclid.Matrix.MakeLU">
            <summary>
            Evaluates the LU decomposition of the matrix and stores the results in the private attributes _L and _U.
            </summary>
        </member>
        <member name="M:Euclid.Matrix.SubMatrix(System.Int32,System.Int32)">
            <summary>
            Returns the matrix from which one row and one column have been excluded (indexed by row and col).
            </summary>
            <param name="row">The index of the row to exclude</param>
            <param name="col">The index of the column to exclude</param>
            <returns>The matrix without the speficied line and the column</returns>
        </member>
        <member name="M:Euclid.Matrix.SetCol(Euclid.Vector,System.Int32)">
            <summary>
            Replaces the column of index k with the input matrix v.
            </summary>
            <param name="v">Column replacing the old one</param>
            <param name="k">Index of the column to replace</param>
        </member>
        <member name="M:Euclid.Matrix.SolveWith(Euclid.Vector)">
            <summary>
            Solves the equation : A*x=v, where A is the Matrix, x the unknown, v the input argument.
            </summary>
            <param name="v">The right hand side of the equation</param>
            <returns>The solution x of A*x=v</returns>
        </member>
        <member name="M:Euclid.Matrix.Column(System.Int32)">
            <summary>
            Extracts a specific column
            </summary>
            <param name="j">the specified column</param>
            <returns>a column Vector</returns>
        </member>
        <member name="M:Euclid.Matrix.Row(System.Int32)">
            <summary>
            Extracts a specific row
            </summary>
            <param name="i">the specified row</param>
            <returns>a row Vector</returns>
        </member>
        <member name="M:Euclid.Matrix.op_Multiply(Euclid.Matrix,System.Double)">
            <summary>
            Multiplies a <c>Matrix</c> by a scalar
            </summary>
            <param name="m">the left hand side <c>Matrix</c></param>
            <param name="f">the scalar</param>
            <returns>the <c>Matrix</c> result of the multiplication</returns>
        </member>
        <member name="M:Euclid.Matrix.op_Multiply(System.Double,Euclid.Matrix)">
            <summary>
            Multiplies a <c>Matrix</c> by a scalar
            </summary>
            <param name="f">the scalar</param>
            <param name="m">the right hand side <c>Matrix</c></param>
            <returns>the <c>Matrix</c> result of the multiplication</returns>
        </member>
        <member name="M:Euclid.Matrix.op_Division(Euclid.Matrix,System.Double)">
            <summary>
            Divides all the coefficients of a <c>Matrix</c> by a scalar
            </summary>
            <param name="m">the left hand side <c>Matrix</c></param>
            <param name="f">the scalar</param>
            <returns>the <c>Matrix</c> result of the division</returns>
        </member>
        <member name="M:Euclid.Matrix.op_Multiply(Euclid.Matrix,Euclid.Matrix)">
            <summary>
            Multiplies two matrices
            </summary>
            <param name="m1">the left hand side <c>Matrix</c></param>
            <param name="m2">the right hand side <c>Matrix</c></param>
            <returns>the <c>Matrix</c> result of the multiplication</returns>
        </member>
        <member name="M:Euclid.Matrix.op_ExclusiveOr(Euclid.Matrix,Euclid.Matrix)">
            <summary>
            Multiplies two matrices using multithreading
            </summary>
            <param name="m1">the left hand side <c>Matrix</c></param>
            <param name="m2">the right hand side <c>Matrix</c></param>
            <returns>the <c>Matrix</c> result of the multiplication</returns>
        </member>
        <member name="M:Euclid.Matrix.Add(Euclid.Matrix,Euclid.Matrix)">
            <summary>
            Performs a matrix addition, after going through dimension compatibility verifications.
            </summary>
            <param name="m1">First matrix</param>
            <param name="m2">Second matrix</param>
            <returns>The sum of m1 and m2</returns>
        </member>
        <member name="M:Euclid.Matrix.LinearCombination(System.Double,Euclid.Matrix,System.Double,Euclid.Matrix)">
            <summary>Builds a Matrix as a linear combination of two matrices</summary>
            <param name="f1">the first Matrix' factor</param>
            <param name="m1">the first Matrix</param>
            <param name="f2">the second Matrix' factor</param>
            <param name="m2">the second Matrix</param>
            <returns>the Matrix result of f1*m1 + f2*m2</returns>
        </member>
        <member name="M:Euclid.Matrix.op_Addition(Euclid.Matrix,System.Double)">
            <summary>
            Adds a scalar to all the coefficients of a <c>Matrix</c>
            </summary>
            <param name="m">the left hand side <c>Matrix</c></param>
            <param name="c">the scalar</param>
            <returns>the <c>Matrix</c> result of the addition</returns>
        </member>
        <member name="M:Euclid.Matrix.op_Addition(System.Double,Euclid.Matrix)">
            <summary>
            Adds a scalar to all the coefficients of a <c>Matrix</c>
            </summary>
            <param name="c">the scalar</param>
            <param name="m">the right hand side <c>Matrix</c></param>
            <returns>the <c>Matrix</c> result of the addition</returns>
        </member>
        <member name="M:Euclid.Matrix.op_Subtraction(Euclid.Matrix,System.Double)">
            <summary>
            Substracts a scalar to all the coefficients of a <c>Matrix</c>
            </summary>
            <param name="m">the left hand side <c>Matrix</c></param>
            <param name="c">the scalar</param>
            <returns>the <c>Matrix</c> result of the substraction</returns>
        </member>
        <member name="M:Euclid.Matrix.op_Subtraction(System.Double,Euclid.Matrix)">
            <summary>
            Adds a scalar to the opposite of a <c>Matrix</c>
            </summary>
            <param name="c">the scalar</param>
            <param name="m">the right hand side <c>Matrix</c></param>
            <returns>the <c>Matrix</c> result of the substraction</returns>
        </member>
        <member name="M:Euclid.Matrix.op_UnaryNegation(Euclid.Matrix)">
            <summary>
            Returns the opposite of the <c>Matrix</c>
            </summary>
            <param name="m">the input matrix</param>
            <returns>the <c>Matrix</c> opposite</returns>
        </member>
        <member name="M:Euclid.Matrix.op_Addition(Euclid.Matrix,Euclid.Matrix)">
            <summary>
            Performs the matrix addition
            </summary>
            <param name="m1">the left hand side matrix</param>
            <param name="m2">the right hand side matrix</param>
            <returns>a <c>Matrix</c></returns>
        </member>
        <member name="M:Euclid.Matrix.op_Subtraction(Euclid.Matrix,Euclid.Matrix)">
            <summary>
            Performs a matrix substraction
            </summary>
            <param name="m1">the left hand side</param>
            <param name="m2">the right hand side</param>
            <returns>the <c>Matrix</c> result of the substraction</returns>
        </member>
        <member name="M:Euclid.Matrix.Power(Euclid.Matrix,System.Int32)">
            <summary>
            Evaluates the matrix raised to a power specified by pow.
            </summary>
            <param name="matrix">the matrix</param>
            <param name="pow">The power to raise the matrix to</param>
            <returns>The matrix, raised to the power pow</returns>
        </member>
        <member name="M:Euclid.Matrix.Create(System.Double[0:,0:])">
            <summary>
            Builds a <c>Matrix</c> from a 2d-array of double
            </summary>
            <param name="model">the 2d-array of data</param>
        </member>
        <member name="M:Euclid.Matrix.Create(System.Int32,System.Int32)">
            <summary>Creates an empty rectangular Matrix </summary>
            <param name="rows">the number of rows</param>
            <param name="cols">the number of columns</param>
            <returns>a Matrix</returns>
        </member>
        <member name="M:Euclid.Matrix.Create(System.Int32,System.Int32,System.Double)">
            <summary>Creates a rectangular Matrix </summary>
            <param name="rows">the number of rows</param>
            <param name="cols">the number of cols</param>
            <param name="value">the value of the coefficients</param>
            <returns>a Matrix</returns>
        </member>
        <member name="M:Euclid.Matrix.CreateSquare(System.Int32)">
            <summary>Creates an empty square Matrix
            </summary>
            <param name="dimension">the Matrix's number of rows/columns</param>
            <returns>a Matrix</returns>
        </member>
        <member name="M:Euclid.Matrix.Create">
            <summary>Creates a 2x2 Matrix</summary>
            <returns>a Matrix</returns>
        </member>
        <member name="M:Euclid.Matrix.CreateZeroMatrix(System.Int32,System.Int32)">
            <summary>
            Returns a matrix filled with zeroes.
            </summary>
            <param name="iRows">The number of rows of the output</param>
            <param name="iCols">The number of columns of the output</param>
            <returns>A matrix filled with zeroes</returns>
        </member>
        <member name="M:Euclid.Matrix.CreateIdentityMatrix(System.Int32,System.Int32)">
            <summary>
            Returns a matrix with ones on the diagonal of ones starting at the (0,0) element.
            When the matrix is squared, this is the identity matrix.
            </summary>
            <param name="iRows">The number of rows of the output</param>
            <param name="iCols">The number of columns of the output</param>
            <returns>A  matrix with ones on the diagonal of ones starting at the (0,0) element</returns>
        </member>
        <member name="M:Euclid.Matrix.CreateBandMatrix(System.Int32,System.Double[])">
            <summary>
            Builds a square symmetric band-matrix
            </summary>
            <param name="size">the size of the matrix</param>
            <param name="values">the values of the diagonals and sub-diagonals</param>
            <returns>a square matrix</returns>
        </member>
        <member name="M:Euclid.Matrix.CreateSquareRandom(System.Int32)">
            <summary>
            Returns a square matrix full of uniform random values
            </summary>
            <param name="size">the number of rows / cols</param>
            <returns>a square <c>Matrix</c></returns>
        </member>
        <member name="M:Euclid.Matrix.CreateRandom(System.Int32,System.Int32)">
            <summary>
            Returns a rectangular matrix full of uniform random values
            </summary>
            <param name="rows">the number of rows</param>
            <param name="columns">the number of columns</param>
            <returns>a rectangular matrix</returns>
        </member>
        <member name="M:Euclid.Matrix.CreateFromColumns(Euclid.Vector[])">
            <summary>Returns a Matrix made of the given Vectors</summary>
            <param name="vectors">the Vectors</param>
            <returns>a Matrix</returns>
        </member>
        <member name="M:Euclid.Matrix.TransposeBySelf(Euclid.Matrix)">
            <summary>
            Returns the product X^T . X
            </summary>
            <param name="X">the <c>Matrix</c></param>
            <returns>the <c>Matrix</c> result of the product</returns>
        </member>
        <member name="M:Euclid.Matrix.FastTransposeBySelf(Euclid.Matrix)">
            <summary>
            Returns the product X^T . X using multithreading
            </summary>
            <param name="X">the <c>Matrix</c></param>
            <returns>the <c>Matrix</c> result of the product</returns>
        </member>
        <member name="M:Euclid.Matrix.Apply(Euclid.Matrix,System.Func{System.Double,System.Double})">
            <summary>
            Applies a function to transform the data of the matrix
            </summary>
            <param name="m">the matrix to transform</param>
            <param name="func">the transforming function</param>
            <returns>a <c>Matrix</c></returns>
        </member>
        <member name="M:Euclid.Matrix.Hadamard(Euclid.Matrix,Euclid.Matrix)">
            <summary>
            Returns the Hadamard product
            </summary>
            <param name="m1">the left hand side</param>
            <param name="m2">the right hand side</param>
            <returns>a <c>Matrix</c> containing the Hadamard product</returns>
        </member>
        <member name="M:Euclid.Matrix.Scalar(Euclid.Matrix,Euclid.Matrix)">
            <summary>
            Returns the scalar product of the matrices
            </summary>
            <param name="m1">the left hand side</param>
            <param name="m2">the right hand side</param>
            <returns>a double value</returns>
        </member>
        <member name="M:Euclid.Matrix.Equals(Euclid.Matrix)">
            <summary>
            Determines whether the specified object is equal to the current object
            </summary>
            <param name="other">the object to compare with the current object</param>
            <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c></returns>
        </member>
        <member name="M:Euclid.Matrix.ToString">
            <summary>
            Returns a string that represents the matrix
            </summary>
            <returns>a string that represents the matrix</returns>
        </member>
        <member name="T:Euclid.Numerics.DifferenceForm">
            <summary>
            The difference form used to differentiate
            </summary>
        </member>
        <member name="F:Euclid.Numerics.DifferenceForm.Forward">
            <summary>the forward-rule</summary>
        </member>
        <member name="F:Euclid.Numerics.DifferenceForm.Backward">
            <summary>the backward-rule</summary>
        </member>
        <member name="F:Euclid.Numerics.DifferenceForm.Central">
            <summary>the central-rule</summary>
        </member>
        <member name="T:Euclid.Numerics.Differentiator">
            <summary>
            Numeric differentiation class
            </summary>
        </member>
        <member name="M:Euclid.Numerics.Differentiator.Differentiate(System.Func{System.Double,System.Double})">
            <summary>
            First degree numerical differentiation
            </summary>
            <param name="function">the function to differentiate</param>
            <returns>the derivative</returns>
        </member>
        <member name="M:Euclid.Numerics.Differentiator.Differentiate(System.Func{System.Double,System.Double},Euclid.Numerics.DifferenceForm,System.Double)">
            <summary>
            First degree numerical differentiation
            </summary>
            <param name="function">the function to differentiate</param>
            <param name="form">the differentiation form</param>
            <param name="step">the differentiation step</param>
            <returns>the derivative</returns>
        </member>
        <member name="M:Euclid.Numerics.Differentiator.Differentiate(System.Func{System.Double,System.Double},System.Int32,Euclid.Numerics.DifferenceForm,System.Double)">
            <summary>
            High degree numerical differentiation
            </summary>
            <param name="function">the function to differentiate</param>
            <param name="n">the degree</param>
            <param name="form">the differentiation form</param>
            <param name="step">the differentiation degree</param>
            <returns>the n-degree derivative</returns>
        </member>
        <member name="T:Euclid.Numerics.IntegrationForm">
            <summary>
            The integration method
            </summary>
        </member>
        <member name="F:Euclid.Numerics.IntegrationForm.Left">
            <summary>Left-point rule</summary>
        </member>
        <member name="F:Euclid.Numerics.IntegrationForm.Right">
            <summary>Right-point rule</summary>
        </member>
        <member name="F:Euclid.Numerics.IntegrationForm.Middle">
            <summary>Middle-point rule</summary>
        </member>
        <member name="F:Euclid.Numerics.IntegrationForm.Trapeze">
            <summary>Trapeze rule</summary>
        </member>
        <member name="F:Euclid.Numerics.IntegrationForm.Simpson">
            <summary>Simpson rule</summary>
        </member>
        <member name="T:Euclid.Numerics.Integrator">
            <summary>
            Iterative processor to calculate the integral of a function over an interval
            </summary>
        </member>
        <member name="M:Euclid.Numerics.Integrator.#ctor(System.Double,System.Double,System.Func{System.Double,System.Double},Euclid.Numerics.IntegrationForm,System.Int32)">
            <summary>
            Builds a <c>Integrator</c>
            </summary>
            <param name="a">the lower bound of the interval</param>
            <param name="b">the upper bound of the interval</param>
            <param name="f">the function to integrate</param>
            <param name="form">the IntegrationForm use to approximate</param>
            <param name="maxIterations">the maximum iterations </param>
        </member>
        <member name="P:Euclid.Numerics.Integrator.Function">
            <summary>
            Gets and sets the function to integrate
            </summary>
        </member>
        <member name="P:Euclid.Numerics.Integrator.MaxIterations">
            <summary>
            Gets and sets the maximum number of iterations
            </summary>
        </member>
        <member name="P:Euclid.Numerics.Integrator.LowerBound">
            <summary>
            Gets and sets the lower bound of the interval
            </summary>
        </member>
        <member name="P:Euclid.Numerics.Integrator.UpperBound">
            <summary>
            Gets and sets the upper bound of the interval
            </summary>
        </member>
        <member name="P:Euclid.Numerics.Integrator.Form">
            <summary>
            Gets and sets the integration form
            </summary>
        </member>
        <member name="P:Euclid.Numerics.Integrator.Error">
            <summary>
            Returns the error of the integration
            </summary>
        </member>
        <member name="P:Euclid.Numerics.Integrator.Iterations">
            <summary>
            Returns the number of iterations of the integration process
            </summary>
        </member>
        <member name="P:Euclid.Numerics.Integrator.Status">
            <summary>
            Returns the status of the solver after the integration process
            </summary>
        </member>
        <member name="P:Euclid.Numerics.Integrator.Result">
            <summary>
            Returns the integral value of the function
            </summary>
        </member>
        <member name="P:Euclid.Numerics.Integrator.Convergence">
            <summary>
            Returns the details of the convergence sequence (integral and error)
            </summary>
        </member>
        <member name="M:Euclid.Numerics.Integrator.Integrate">
            <summary>
            Performs the iterative integration of the function
            </summary>
        </member>
        <member name="T:Euclid.Numerics.NumericalSeriesCumulator">
            <summary>Calculates the sum of the numerical series</summary>
        </member>
        <member name="M:Euclid.Numerics.NumericalSeriesCumulator.#ctor(System.Int64,System.Func{System.Int64,System.Double},System.Int32)">
            <summary>Builds a cumulative calculator of numerical series</summary>
            <param name="initialIndex">the initial index of the sum</param>
            <param name="series">the series function</param>
            <param name="maxIterations">the maximum number of iterations</param>
        </member>
        <member name="P:Euclid.Numerics.NumericalSeriesCumulator.InitialIndex">
            <summary>Gets and sets the initial index of the sum</summary>
        </member>
        <member name="P:Euclid.Numerics.NumericalSeriesCumulator.MaxIterations">
            <summary>Gets and sets the maximum number of iterations</summary>
        </member>
        <member name="P:Euclid.Numerics.NumericalSeriesCumulator.Tolerance">
            <summary>
            Gets and sets the tolerance for the target (threshold for target reached)
            </summary>
        </member>
        <member name="P:Euclid.Numerics.NumericalSeriesCumulator.Iterations">
            <summary>Gets the number of interations of the cumulator</summary>
        </member>
        <member name="P:Euclid.Numerics.NumericalSeriesCumulator.Sum">
            <summary>Gets the cumulated sum of the series</summary>
        </member>
        <member name="P:Euclid.Numerics.NumericalSeriesCumulator.Status">
            <summary>Gets the final status of the cumulator</summary>
        </member>
        <member name="P:Euclid.Numerics.NumericalSeriesCumulator.Convergence">
            <summary>Gets the details of the convergence (value)</summary>
        </member>
        <member name="M:Euclid.Numerics.NumericalSeriesCumulator.Calculate">
            <summary>Sums the series until convergence or exhaustion of the iterations</summary>
        </member>
        <member name="M:Euclid.Numerics.NumericalSeriesCumulator.CalculateAitken">
            <summary>Sums the series until convergence or exhaustion of the iterations (using the Aitken Delta Squared method)</summary>
        </member>
        <member name="T:Euclid.Numerics.NumericalSeriesStatus">
            <summary>The status of the numerical series status</summary>
        </member>
        <member name="F:Euclid.Numerics.NumericalSeriesStatus.NotRan">
            <summary>The cumulator did not run</summary>
        </member>
        <member name="F:Euclid.Numerics.NumericalSeriesStatus.Diverged">
            <summary>The cumulator diverged</summary>
        </member>
        <member name="F:Euclid.Numerics.NumericalSeriesStatus.Normal">
            <summary>The cumulator ran as expected</summary>
        </member>
        <member name="F:Euclid.Numerics.NumericalSeriesStatus.IterationExceeded">
            <summary>The cumulator exceeded its maximum number of iterations</summary>
        </member>
        <member name="T:Euclid.Objects.Map`2">
            <summary>A two ways dictionary class</summary>
            <typeparam name="T1">the left hand side type</typeparam>
            <typeparam name="T2">the right hand side type</typeparam>
        </member>
        <member name="M:Euclid.Objects.Map`2.#ctor">
            <summary>Builds an empty map</summary>
        </member>
        <member name="M:Euclid.Objects.Map`2.#ctor(System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}})">
            <summary>Builds a Map of </summary>
            <param name="values"></param>
        </member>
        <member name="M:Euclid.Objects.Map`2.Add(`0,`1)">
            <summary>Adds a pair to the map</summary>
            <param name="t1">the left hand side key</param>
            <param name="t2">the right hand side key</param>
        </member>
        <member name="M:Euclid.Objects.Map`2.Remove(`0,`1)">
            <summary>Removes a pair from the map</summary>
            <param name="t1">the left hand side key</param>
            <param name="t2">the right hand side key</param>
        </member>
        <member name="M:Euclid.Objects.Map`2.SetForward(`0,`1)">
            <summary>Sets the right hand side value for a given left hand side value</summary>
            <param name="key">the left hand side key</param>
            <param name="newValue">the new right hand side value</param>
        </member>
        <member name="M:Euclid.Objects.Map`2.SetBackward(`1,`0)">
            <summary>Sets the left hand side value for a given right hand side value</summary>
            <param name="key">the right hand side key</param>
            <param name="newValue">the new left right hand side value</param>
        </member>
        <member name="M:Euclid.Objects.Map`2.ContainsKey(`0)">
            <summary>Checks if the left hand side contains a key</summary>
            <param name="t1">the left hand side key</param>
            <returns><c>True</c> if this is a left hand side key, <c>False</c> otherwise</returns>
        </member>
        <member name="M:Euclid.Objects.Map`2.ContainsValue(`1)">
            <summary>Checks if the right hand side contains a key</summary>
            <param name="t2">the right hand side key</param>
            <returns><c>True</c> if this a right hand side key, <c>False</c> otherwise</returns>
        </member>
        <member name="M:Euclid.Objects.Map`2.Forward(`0)">
            <summary>Gets the right hand side value associated to a left hand side key</summary>
            <param name="t1">The left hand side key</param>
            <returns>a right hand side key</returns>
        </member>
        <member name="M:Euclid.Objects.Map`2.Backward(`1)">
            <summary>Gets the left hand side value associated to a right hand side key</summary>
            <param name="t2">The right hand side key</param>
            <returns>a left hand side key</returns>
        </member>
        <member name="P:Euclid.Objects.Map`2.Lefts">
            <summary>Gets the left hand side keys</summary>
        </member>
        <member name="P:Euclid.Objects.Map`2.Rights">
            <summary>Gets the right hand side keys</summary>
        </member>
        <member name="P:Euclid.Objects.Map`2.Count">
            <summary>Gets the number of pairs in the map</summary>
        </member>
        <member name="P:Euclid.Objects.Map`2.Clone">
            <summary>Gets a deep copy of the map</summary>
        </member>
        <member name="T:Euclid.Polynomial">
            <summary>
            Standard polynomial
            </summary>
        </member>
        <member name="M:Euclid.Polynomial.#ctor(System.Int32)">
            <summary>
            Builds a polynomial with no coefficients except the highest
            </summary>
            <param name="degree">the polynomial's degree</param>
        </member>
        <member name="M:Euclid.Polynomial.#ctor(System.Collections.Generic.IList{System.Double})">
            <summary>
            Builds a polynomial through the coefficients
            </summary>
            <param name="terms">the coefficients of the polynomial</param>
        </member>
        <member name="M:Euclid.Polynomial.#ctor(System.Double[])">
            <summary>
            Builds a <c>Polynomial</c> from a list of coefficients
            </summary>
            <param name="coefficients">the coefficients</param>
        </member>
        <member name="M:Euclid.Polynomial.Normalize">
            <summary>
            Divides all the terms by the leading term so the polynomial has one(1) as leading term
            </summary>
        </member>
        <member name="M:Euclid.Polynomial.Evaluate(System.Double)">
            <summary>
            Evaluates the polynomial's value for a given value
            </summary>
            <param name="x">The value for which the polynomial is evaluated</param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Polynomial.Evaluate(Euclid.Complex)">
            <summary>Evaluates the polynomial's value for a given complex value</summary>
            <param name="x">the argument</param>
            <returns>a <c>Complex</c></returns>
        </member>
        <member name="M:Euclid.Polynomial.ComplexRoots">
            <summary>
            Computes the roots of polynomial p via Weierstrass iteration.
            </summary>
            <returns>the complex roots of the <c>Polynomial</c></returns>
        </member>
        <member name="M:Euclid.Polynomial.Roots">
            <summary>
            Computes the real roots of the <c>Polynomial</c>
            </summary>
            <returns>a list of double</returns>
        </member>
        <member name="M:Euclid.Polynomial.Equals(Euclid.Polynomial)">
            <summary>Verifies the equality between two Polynomials</summary>
            <param name="other">the other Polynomial</param>
            <returns><c>true</c> if they are equal, <c>false</c> otherwise</returns>
        </member>
        <member name="P:Euclid.Polynomial.Item(System.Int32)">
            <summary>
            Accesses the terms of the polynomial
            </summary>
            <param name="i">the index</param>
            <returns>a term of the polynomial</returns>
        </member>
        <member name="P:Euclid.Polynomial.Degree">
            <summary>
            Returns the polynomial's degree
            </summary>
        </member>
        <member name="P:Euclid.Polynomial.Derivative">
            <summary>
            Returns the derivative polynomial (one degree less)
            </summary>
        </member>
        <member name="M:Euclid.Polynomial.ToString">
            <summary>Returns a string representing the polynomial</summary>
            <returns>a <c>string</c></returns>
        </member>
        <member name="M:Euclid.Polynomial.ToString(System.String)">
            <summary>
            Returns a string representing the polynomial
            </summary>
            <param name="format">the format for all coefficients</param>
            <returns>a <c>String</c></returns>
        </member>
        <member name="P:Euclid.Polynomial.Clone">
            <summary>
            Returns a deep copy of the polynomial
            </summary>
        </member>
        <member name="M:Euclid.Polynomial.op_Multiply(Euclid.Polynomial,System.Double)">
            <summary>Multiplies a polynomial by a scalar</summary>
            <param name="p">the <c>Polynomial</c></param>
            <param name="f">the scalar</param>
            <returns>a <c>Polynomial</c></returns>
        </member>
        <member name="M:Euclid.Polynomial.op_Multiply(System.Double,Euclid.Polynomial)">
            <summary>Multiplies a polynomial by a scalar</summary>
            <param name="f">the scalar</param>
            <param name="p">the <c>Polynomial</c></param>
            <returns>a <c>Polynomial</c></returns>
        </member>
        <member name="M:Euclid.Polynomial.op_Multiply(Euclid.Polynomial,Euclid.Polynomial)">
            <summary> multiplies two polynomials </summary>
            <param name="p1">the left hand side</param>
            <param name="p2">the right hand side</param>
            <returns>the <c>Polynomial</c> result of the polynomial</returns>
        </member>
        <member name="M:Euclid.Polynomial.op_ExclusiveOr(Euclid.Polynomial,System.Int32)">
            <summary>Raises a Polynomial to an integer power</summary>
            <param name="p">the Polynomial</param>
            <param name="n">the power</param>
            <returns>a <c>Polynomial</c></returns>
        </member>
        <member name="M:Euclid.Polynomial.Add(Euclid.Polynomial,Euclid.Polynomial)">
            <summary>
            Performs a polynomial addition
            </summary>
            <param name="p1">First matrix</param>
            <param name="p2">Second matrix</param>
            <returns>The sum of m1 and m2</returns>
        </member>
        <member name="M:Euclid.Polynomial.op_Addition(Euclid.Polynomial,System.Double)">
            <summary>
            Adds a polynomial to a scalar
            </summary>
            <param name="p">the polynomial left hand side</param>
            <param name="c">the scalar right hand side</param>
            <returns>the <c>Polynomial</c> result of the adition</returns>
        </member>
        <member name="M:Euclid.Polynomial.op_Addition(System.Double,Euclid.Polynomial)">
            <summary>
            Adds a polynomial to a scalar
            </summary>
            <param name="c">the scalar left hand side</param>
            <param name="p">the polynomial right hand side</param>
            <returns>the <c>Polynomial</c> result of the addition</returns>
        </member>
        <member name="M:Euclid.Polynomial.op_Subtraction(Euclid.Polynomial,System.Double)">
            <summary>Substracts a scalar to a <c>Polynomial</c></summary>
            <param name="p">the <c>Polynomial</c></param>
            <param name="c">the scalar</param>
            <returns>a <c>Polynomial</c></returns>
        </member>
        <member name="M:Euclid.Polynomial.op_Subtraction(System.Double,Euclid.Polynomial)">
            <summary>Substracts a <c>Polynomial to a scalar</c></summary>
            <param name="c">the scalar left hand side</param>
            <param name="p">the <c>Polynomial</c> right hand side</param>
            <returns>a <c>Polynomial</c></returns>
        </member>
        <member name="M:Euclid.Polynomial.op_UnaryNegation(Euclid.Polynomial)">
            <summary>Returns the opposite of the <c>Polynomial</c></summary>
            <param name="p">the <c>Polynomial</c></param>
            <returns>a <c>Polynomial</c></returns>
        </member>
        <member name="M:Euclid.Polynomial.op_Addition(Euclid.Polynomial,Euclid.Polynomial)">
            <summary>
            Adds two polynomials
            </summary>
            <param name="p1">the left hand side</param>
            <param name="p2">the right hand side</param>
            <returns>the <c>Polynomial</c> result of the addition</returns>
        </member>
        <member name="M:Euclid.Polynomial.op_Subtraction(Euclid.Polynomial,Euclid.Polynomial)">
            <summary>
            Substracts one polynomial to another
            </summary>
            <param name="p1">the left hand side</param>
            <param name="p2">the right hand side</param>
            <returns>the <c>Polynomial</c> result of the substraction </returns>
        </member>
        <member name="M:Euclid.Polynomial.Power(Euclid.Polynomial,System.Int32)">
            <summary>
            Evaluates the Polynomial raised to a power specified by pow.
            </summary>
            <param name="p">the <c>Polynomial</c> target</param>
            <param name="pow">The power we want to raise the Polynomial to</param>
            <returns>The Polynomial, raised to the power pow</returns>
        </member>
        <member name="T:Euclid.Serialization.CSVHelper">
            <summary>
            CSV Helper
            </summary>
        </member>
        <member name="F:Euclid.Serialization.CSVHelper.Separator">
            <summary>
            The culture's list separator
            </summary>
        </member>
        <member name="T:Euclid.Serialization.IXmlable">
            <summary>
            Interface allowing serialization to an XML files
            </summary>
        </member>
        <member name="M:Euclid.Serialization.IXmlable.ToXml(System.Xml.XmlWriter)">
            <summary>Serializes a class to Xml </summary>
            <param name="writer">the <c>XmlWriter</c></param>
        </member>
        <member name="T:Euclid.Serialization.ICSVable">
            <summary>
            Interface allowing serialization and de-serialization from/to CSV files
            </summary>
        </member>
        <member name="M:Euclid.Serialization.ICSVable.ToCSV">
            <summary>Builds a string representation of the content of the class </summary>
            <returns>a <c>String</c></returns>
        </member>
        <member name="M:Euclid.Serialization.ICSVable.FromCSV(System.String)">
            <summary>Fills a class from a string</summary>
            <param name="text">the <c>String</c> content</param>
        </member>
        <member name="T:Euclid.Solvers.Descents">
            <summary>
            Default thresholds for iterative solvers
            </summary>
        </member>
        <member name="F:Euclid.Solvers.Descents.ERR_EPSILON">
            <summary>Default absolute tolerance for the solvers </summary>
        </member>
        <member name="F:Euclid.Solvers.Descents.GRADIENT_EPSILON">
            <summary>Default tolerance for gradients and derivatives </summary>
        </member>
        <member name="F:Euclid.Solvers.Descents.STEP_EPSILON">
            <summary>Default increment </summary>
        </member>
        <member name="T:Euclid.Solvers.GradientDescent">
            <summary>
            Class used to perform a gradient descent on any multivariate function
            </summary>
        </member>
        <member name="M:Euclid.Solvers.GradientDescent.#ctor(Euclid.Vector,Euclid.Solvers.LineSearch,System.Func{Euclid.Vector,System.Double},System.Int32,System.Int32)">
            <summary>
            Builds a GradientDescent helper
            </summary>
            <param name="initialGuess">the initial guess Vector</param>
            <param name="lineSearch">the line search method</param>
            <param name="function">the function to minimize</param>
            <param name="maxIterations">the maximum number of iterations in the gradient</param>
            <param name="maxLineSearchIterations">the maximum number of iterations in the line search</param>
        </member>
        <member name="P:Euclid.Solvers.GradientDescent.LineSearch">
            <summary>Gets and sets the line search method used to optimize the step</summary>
        </member>
        <member name="P:Euclid.Solvers.GradientDescent.Function">
            <summary>Gets and sets the function to minimize</summary>
        </member>
        <member name="P:Euclid.Solvers.GradientDescent.MaxIterations">
            <summary>Gets and sets the maximum number of iterations </summary>
        </member>
        <member name="P:Euclid.Solvers.GradientDescent.MaxLineSearchIterations">
            <summary>Gets and sets the maxium number of iterations in the line search </summary>
        </member>
        <member name="P:Euclid.Solvers.GradientDescent.Status">
            <summary>
            The final status of the solver
            </summary>
        </member>
        <member name="P:Euclid.Solvers.GradientDescent.Iterations">
            <summary>
            Returns the number of interations of the solver
            </summary>
        </member>
        <member name="P:Euclid.Solvers.GradientDescent.Error">
            <summary>
            Returns the final value of the function
            </summary>
        </member>
        <member name="P:Euclid.Solvers.GradientDescent.Result">
            <summary>
            The result of the solver
            </summary>
        </member>
        <member name="P:Euclid.Solvers.GradientDescent.Convergence">
            <summary>Gets the details of the convergence (gradient norm, error)</summary>
        </member>
        <member name="P:Euclid.Solvers.GradientDescent.Evaluations">
            <summary>Gets the number of times the function was evaluated </summary>
        </member>
        <member name="M:Euclid.Solvers.GradientDescent.Minimize(System.Double)">
            <summary>Minimizes the function using classic Gradient Descent algorithm</summary>
            <param name="momentum">the momentum of the descent</param>
        </member>
        <member name="M:Euclid.Solvers.GradientDescent.MinimizeBFGS">
            <summary>Minimizes the function using the BFGS gradient descent</summary>
        </member>
        <member name="T:Euclid.Solvers.ISingleVariableSolver">
            <summary>
            Interface for single variable solvers
            </summary>
        </member>
        <member name="P:Euclid.Solvers.ISingleVariableSolver.Function">
            <summary>
            Gets and sets the function to solve for
            </summary>
        </member>
        <member name="P:Euclid.Solvers.ISingleVariableSolver.Status">
            <summary>
            Gets the solver's status
            </summary>
        </member>
        <member name="P:Euclid.Solvers.ISingleVariableSolver.Iterations">
            <summary>
            Gets the number of iterations the solver went through
            </summary>
        </member>
        <member name="P:Euclid.Solvers.ISingleVariableSolver.MaxIterations">
            <summary>
            Gets and sets the maximum number of iterations
            </summary>
        </member>
        <member name="P:Euclid.Solvers.ISingleVariableSolver.Result">
            <summary>
            Gets the result
            </summary>
        </member>
        <member name="P:Euclid.Solvers.ISingleVariableSolver.Error">
            <summary>
            Gets the final error
            </summary>
        </member>
        <member name="P:Euclid.Solvers.ISingleVariableSolver.Convergence">
            <summary>
            Gets the convergence path
            </summary>
        </member>
        <member name="M:Euclid.Solvers.ISingleVariableSolver.Solve">
            <summary>
            Solves for the given function, parameters and initial conditions, target set @ 0
            </summary>
        </member>
        <member name="M:Euclid.Solvers.ISingleVariableSolver.Solve(System.Double)">
            <summary>
            Solves for the given function, parameters, initial conditions and target
            </summary>
            <param name="target">the target value for the function</param>
        </member>
        <member name="T:Euclid.Solvers.LineSearch">
            <summary>
            Line search methods used for the gradient descent
            </summary>
        </member>
        <member name="F:Euclid.Solvers.LineSearch.Naive">
            <summary>Naïve line search by dividing the alpha until the functional is lowered</summary>
        </member>
        <member name="F:Euclid.Solvers.LineSearch.Armijo">
            <summary>Armijo criteria</summary>
        </member>
        <member name="F:Euclid.Solvers.LineSearch.ArmijoGoldStein">
            <summary>Armijo Goldstein criteria </summary>
        </member>
        <member name="F:Euclid.Solvers.LineSearch.StrongWolfe">
            <summary>Strong Wolfe criteria </summary>
        </member>
        <member name="T:Euclid.Solvers.NewtonRaphson">
            <summary>
            Finds a root using the Newton-Raphson method
            </summary>
        </member>
        <member name="M:Euclid.Solvers.NewtonRaphson.#ctor(System.Double,System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.Int32)">
            <summary>
            Builds a solver using the Newton-Raphson method
            </summary>
            <param name="initialGuess">the initial guess</param>
            <param name="f">the function to solve for</param>
            <param name="df">the derivative of the function to solve for</param>
            <param name="maxIterations">the maximum number of iterations</param>
        </member>
        <member name="M:Euclid.Solvers.NewtonRaphson.#ctor(System.Double,System.Func{System.Double,System.Double},System.Int32)">
            <summary>
            Builds a solver using the Newton-Raphson method
            </summary>
            <param name="initialGuess">the initial guess</param>
            <param name="f">the function to solve for</param>
            <param name="maxIterations">the maximum number of iterations</param>
        </member>
        <member name="P:Euclid.Solvers.NewtonRaphson.Function">
            <summary>
            Gets and sets the function to solve for
            </summary>
        </member>
        <member name="P:Euclid.Solvers.NewtonRaphson.InitialGuess">
            <summary>
            Gets and sets the initial guess
            </summary>
        </member>
        <member name="P:Euclid.Solvers.NewtonRaphson.MaxIterations">
            <summary>
            Gets and sets the maximum number of iterations
            </summary>
        </member>
        <member name="P:Euclid.Solvers.NewtonRaphson.AbsoluteTolerance">
            <summary>
            Gets and sets the tolerance for the target (threshold for target reached)
            </summary>
        </member>
        <member name="P:Euclid.Solvers.NewtonRaphson.SlopeTolerance">
            <summary>
            Gets and sets the tolerance for the slope (threshold for stationarity)
            </summary>
        </member>
        <member name="P:Euclid.Solvers.NewtonRaphson.Error">
            <summary>
            Returns the final error
            </summary>
        </member>
        <member name="P:Euclid.Solvers.NewtonRaphson.Iterations">
            <summary>
            Returns the number of interations of the solver
            </summary>
        </member>
        <member name="P:Euclid.Solvers.NewtonRaphson.Status">
            <summary>
            The final status of the solver
            </summary>
        </member>
        <member name="P:Euclid.Solvers.NewtonRaphson.Result">
            <summary>
            The result of the solver
            </summary>
        </member>
        <member name="P:Euclid.Solvers.NewtonRaphson.Convergence">
            <summary>
            The details of the convergence (value, error)
            </summary>
        </member>
        <member name="M:Euclid.Solvers.NewtonRaphson.Solve">
            <summary>
            Solve the equation f(x)=0 using the Newton-Raphson method
            </summary>
        </member>
        <member name="M:Euclid.Solvers.NewtonRaphson.Solve(System.Double)">
            <summary>
            Solve the equation f(x)=target using the Newton-Raphson method
            </summary>
            <param name="target">the target</param>
        </member>
        <member name="T:Euclid.Solvers.RootBracketing">
            <summary>
            Finds a root using root bracketing methods
            </summary>
        </member>
        <member name="M:Euclid.Solvers.RootBracketing.#ctor(System.Double,System.Double,System.Func{System.Double,System.Double},Euclid.Solvers.RootBracketingMethod,System.Int32)">
            <summary>
            Builds a solver using root bracketing methods
            </summary>
            <param name="initialLowerBound">the lower bound of the initial interval</param>
            <param name="initialUpperBound">the upper bound of the initial interval</param>
            <param name="f">the function to solve for</param>
            <param name="method">the root bracketing method</param>
            <param name="maxIterations">the maximum number of iterations</param>
        </member>
        <member name="P:Euclid.Solvers.RootBracketing.Function">
            <summary>
            Gets and sets the function to solve for
            </summary>
        </member>
        <member name="P:Euclid.Solvers.RootBracketing.LowerBound">
            <summary>
            Gets and sets the lower bound of the interval
            </summary>
        </member>
        <member name="P:Euclid.Solvers.RootBracketing.UpperBound">
            <summary>
            Gets and sets the upper bound of the interval
            </summary>
        </member>
        <member name="P:Euclid.Solvers.RootBracketing.MaxIterations">
            <summary>
            Gets and sets the maximum number of iterations
            </summary>
        </member>
        <member name="P:Euclid.Solvers.RootBracketing.Method">
            <summary>
            Gets and sets the root bracketing method
            </summary>
        </member>
        <member name="P:Euclid.Solvers.RootBracketing.Tolerance">
            <summary>
            Gets and sets the tolerance for the target (threshold for target reached)
            </summary>
        </member>
        <member name="P:Euclid.Solvers.RootBracketing.Error">
            <summary>
            Returns the final error
            </summary>
        </member>
        <member name="P:Euclid.Solvers.RootBracketing.Iterations">
            <summary>
            Returns the number of iterations of the solver
            </summary>
        </member>
        <member name="P:Euclid.Solvers.RootBracketing.Result">
            <summary>
            The result of the solver
            </summary>
        </member>
        <member name="P:Euclid.Solvers.RootBracketing.Status">
            <summary>
            The final status of the solver
            </summary>
        </member>
        <member name="P:Euclid.Solvers.RootBracketing.Convergence">
            <summary>
            Gets the details of the convergence (value, error)
            </summary>
        </member>
        <member name="M:Euclid.Solvers.RootBracketing.Solve">
            <summary>
            Solve the equation f(x)=0 using the root bracketing method
            </summary>
        </member>
        <member name="M:Euclid.Solvers.RootBracketing.Solve(System.Double)">
            <summary>
            Solve the equation f(x)=target using the root bracketing method
            </summary>
            <param name="target">the target</param>
        </member>
        <member name="T:Euclid.Solvers.RootBracketingMethod">
            <summary>
            Specifies a root bracketing method
            </summary>
        </member>
        <member name="F:Euclid.Solvers.RootBracketingMethod.Dichotomy">
            <summary>
            the dichotomy root bracketing
            </summary>
        </member>
        <member name="F:Euclid.Solvers.RootBracketingMethod.FalsePosition">
            <summary>
            the false position root bracketing
            </summary>
        </member>
        <member name="T:Euclid.Solvers.SolverStatus">
            <summary>
            The status of a solver
            </summary>
        </member>
        <member name="F:Euclid.Solvers.SolverStatus.NotRan">
            <summary> The solver did not run </summary>
        </member>
        <member name="F:Euclid.Solvers.SolverStatus.Normal">
            <summary> The solver ran as expected </summary>
        </member>
        <member name="F:Euclid.Solvers.SolverStatus.IterationExceeded">
            <summary> The solver exceeded its maximum iterations </summary>
        </member>
        <member name="F:Euclid.Solvers.SolverStatus.BadFunction">
            <summary> The function is not adapted to the solver's requirements </summary>
        </member>
        <member name="F:Euclid.Solvers.SolverStatus.Diverged">
            <summary> The solver diverged </summary>
        </member>
        <member name="T:Euclid.Fn">
             This class contains physical constants and special functions not found
             in the System.Math class.
             Like the System.Math class this class is final and cannot be
             subclassed.
             All physical constants are in cgs units.
             NOTE: These special functions do not necessarily use the fastest
             or most accurate algorithms.
            
             @version $Revision: 1.8 $, $Date: 2005/09/12 09:52:34 $
        </member>
        <member name="F:Euclid.Fn.EulerGamma">
            <summary>The Euler-Mascheroni constant</summary>
            <remarks>lim(n -> inf){ Sum(k=1 -> n) { 1/k - log(n) } }</remarks>
        </member>
        <member name="F:Euclid.Fn.BOLTZMAN">
            <summary>
            Boltzman Constant. Units erg/deg(K) 
            </summary>
        </member>
        <member name="F:Euclid.Fn.ECHARGE">
            <summary>
            Elementary Charge. Units statcoulomb 
            </summary>
        </member>
        <member name="F:Euclid.Fn.EMASS">
            <summary>
            Electron Mass. Units g 
            </summary>
        </member>
        <member name="F:Euclid.Fn.PMASS">
            <summary>
            Proton Mass. Units g 
            </summary>
        </member>
        <member name="F:Euclid.Fn.GRAV">
            <summary>
            Gravitational Constant. Units dyne-cm^2/g^2
            </summary>
        </member>
        <member name="F:Euclid.Fn.PLANCK">
            <summary>
            Planck constant. Units erg-sec 
            </summary>
        </member>
        <member name="F:Euclid.Fn.LIGHTSPEED">
            <summary>
            Speed of Light in a Vacuum. Units cm/sec 
            </summary>
        </member>
        <member name="F:Euclid.Fn.STEFANBOLTZ">
            <summary>
            Stefan-Boltzman Constant. Units erg/cm^2-sec-deg^4 
            </summary>
        </member>
        <member name="F:Euclid.Fn.AVOGADRO">
            <summary>
            Avogadro Number. Units  1/mol 
            </summary>
        </member>
        <member name="F:Euclid.Fn.GASCONSTANT">
            <summary>
            Gas Constant. Units erg/deg-mol 
            </summary>
        </member>
        <member name="F:Euclid.Fn.GRAVACC">
            <summary>
            Gravitational Acceleration at the Earths surface. Units cm/sec^2 
            </summary>
        </member>
        <member name="F:Euclid.Fn.SOLARMASS">
            <summary>
            Solar Mass. Units g 
            </summary>
        </member>
        <member name="F:Euclid.Fn.SOLARRADIUS">
            <summary>
            Solar Radius. Units cm
            </summary>
        </member>
        <member name="F:Euclid.Fn.SOLARLUM">
            <summary>
            Solar Luminosity. Units erg/sec
            </summary>
        </member>
        <member name="F:Euclid.Fn.SOLARFLUX">
            <summary>
            Solar Flux. Units erg/cm^2-sec
            </summary>
        </member>
        <member name="F:Euclid.Fn.AU">
            <summary>
            Astronomical Unit (radius of the Earth's orbit). Units cm
            </summary>
        </member>
        <member name="M:Euclid.Fn.Norm(System.Double,System.Double)">
            <summary>
            More precise way of calculating the norm
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>the norm</returns>
        </member>
        <member name="M:Euclid.Fn.log10(System.Double)">
            <summary>
            Returns the base 10 logarithm of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.acosh(System.Double)">
            <summary>
            Returns the hyperbolic arc cosine of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.asinh(System.Double)">
            <summary>
            Returns the hyperbolic arc sine of the specified number.
            </summary>
            <param name="xx"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.atanh(System.Double)">
            <summary>
            Returns the hyperbolic arc tangent of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.j0(System.Double)">
            <summary>
            Returns the Bessel function of order 0 of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.j1(System.Double)">
            <summary>
            Returns the Bessel function of order 1 of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.jn(System.Int32,System.Double)">
            <summary>
            Returns the Bessel function of order n of the specified number.
            </summary>
            <param name="n"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.y0(System.Double)">
            <summary>
            Returns the Bessel function of the second kind, of order 0 of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.y1(System.Double)">
            <summary>
            Returns the Bessel function of the second kind, of order 1 of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.yn(System.Int32,System.Double)">
            <summary>
            Returns the Bessel function of the second kind, of order n of the specified number.
            </summary>
            <param name="n"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.fac(System.Double)">
            <summary>
            Returns the factorial of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.Factorial(System.Int32)">
            <summary>
            Returns the factorial of the specified number.
            </summary>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.Gamma(System.Double)">
            <summary>
            Returns the gamma function of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.Beta(System.Double,System.Double)">
            <summary>
            Returns the beta function
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.IncompleteRegularizedBeta(System.Double,System.Double,System.Double)">
            <summary>
            Return the incomplete regularized beta function
            </summary>
            <param name="t">the integral's upper bound</param>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.DiGamma(System.Double)">
            <summary>
            Returns the digamma (psi) function of real values (except at 0, -1, -2, ...).
            Digamma is the logarithmic derivative of the <see cref="M:Euclid.Fn.Gamma(System.Double)"/> function.
            </summary>
        </member>
        <member name="M:Euclid.Fn.stirf(System.Double)">
            <summary>
            Return the gamma function computed by Stirling's formula.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.IncompleteUpperGamma(System.Double,System.Double)">
            <summary>
            Returns the complemented incomplete gamma function.
            </summary>
            <param name="a"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.IncompleteLowerGamma(System.Double,System.Double)">
            <summary>
            Returns the incomplete gamma function.
            </summary>
            <param name="a"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.chisq(System.Double,System.Double)">
             Returns the area under the left hand tail (from 0 to x)
             of the Chi square probability density function with
             v degrees of freedom.
            
            <summary>
            Returns the chi-square function (left hand tail).
            </summary>
            <param name="df">degrees of freedom</param>
            <param name="x">double value</param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.chisqc(System.Double,System.Double)">
             Returns the area under the right hand tail (from x to
             infinity) of the Chi square probability density function
             with v degrees of freedom:
            
            <summary>
            Returns the chi-square function (right hand tail).
            </summary>
            <param name="df">degrees of freedom</param>
            <param name="x">double value</param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.poisson(System.Int32,System.Double)">
            <summary>
            Returns the sum of the first k terms of the Poisson distribution.
            </summary>
            <param name="k">number of terms</param>
            <param name="x">double value</param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.poissonc(System.Int32,System.Double)">
            <summary>
            Returns the sum of the terms k+1 to infinity of the Poisson distribution.
            </summary>
            <param name="k">start</param>
            <param name="x">double value</param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.normal(System.Double)">
            <summary>
            Returns the area under the Gaussian probability density function, integrated from minus infinity to a.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.erfc(System.Double)">
            <summary>
            Returns the complementary error function of the specified number.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.erf(System.Double)">
            <summary>
            Returns the error function of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.Phi(System.Double)">
            <summary>
            Computes the Phi function which is the cumulative distribution for the standard normal distribution
            </summary>
            <param name="x">The location at which to compute the Phi</param>
            <returns>a double</returns>
        </member>
        <member name="M:Euclid.Fn.InvPhi(System.Double)">
            <summary>
            Computes the inverse of the Phi function
            </summary>
            <param name="p">The location at which to compute the inverse Phi function</param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.GaussBell(System.Double)">
            <summary>
            Computes the Gauss-bell function
            </summary>
            <param name="x">The location at which to compute the function</param>
            <returns>a <c>double</c></returns>
        </member>
        <member name="M:Euclid.Fn.polevl(System.Double,System.Double[],System.Int32)">
            <summary>
            Evaluates polynomial of degree N
            </summary>
            <param name="x"></param>
            <param name="coef"></param>
            <param name="N"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.p1evl(System.Double,System.Double[],System.Int32)">
            <summary>
            Evaluates polynomial of degree N with assumtion that coef[N] = 1.0
            </summary>
            <param name="x"></param>
            <param name="coef"></param>
            <param name="N"></param>
            <returns></returns>		
        </member>
        <member name="M:Euclid.Fn.lgamma(System.Double)">
            <summary>
            Returns the natural logarithm of gamma function.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.IncompleteBeta(System.Double,System.Double,System.Double)">
            <summary>
            Returns the incomplete beta function evaluated from zero to xx.
            </summary>
            <param name="aa"></param>
            <param name="bb"></param>
            <param name="xx"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.incbcf(System.Double,System.Double,System.Double)">
            <summary>
            Returns the continued fraction expansion #1 for incomplete beta integral.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.incbd(System.Double,System.Double,System.Double)">
            <summary>
            Returns the continued fraction expansion #2 for incomplete beta integral.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Fn.pseries(System.Double,System.Double,System.Double)">
            <summary>
            Returns the power series for incomplete beta integral. Use when b*x is small and x not too close to 1.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:Euclid.Vector">
            <summary>
            Vector of double class
            </summary>
        </member>
        <member name="M:Euclid.Vector.Apply(Euclid.Vector,System.Func{System.Double,System.Double})">
            <summary>Applies a function to transform the data of the vector</summary>
            <param name="v">the vector to transform</param>
            <param name="func">the transforming function</param>
            <returns>a <c>Vector</c></returns>
        </member>
        <member name="P:Euclid.Vector.Size">
            <summary>Returns the Vector's size</summary>
        </member>
        <member name="P:Euclid.Vector.Data">
            <summary>Gets the Vector's components</summary>
        </member>
        <member name="P:Euclid.Vector.Item(System.Int32)">
            <summary>
            Gets a component of the Vector
            </summary>
            <param name="i">the index</param>
            <returns>a double</returns>
        </member>
        <member name="P:Euclid.Vector.Clone">
            <summary>Returns a deep copy of the Vector</summary>
        </member>
        <member name="P:Euclid.Vector.Norm1">
            <summary>
            Return the sum of the absolute values
            </summary>
        </member>
        <member name="P:Euclid.Vector.Norm2">
            <summary>
            Returns the square root of the sum of squares
            </summary>
        </member>
        <member name="P:Euclid.Vector.NormSup">
            <summary>
            Returns the largest value of the <c>Matrix</c> in absolute value
            </summary>
        </member>
        <member name="P:Euclid.Vector.SumOfSquares">
            <summary>
            Returns the sum of the squared values
            </summary>
        </member>
        <member name="P:Euclid.Vector.Sum">
            <summary>
            Returns the sum of the values
            </summary>
        </member>
        <member name="M:Euclid.Vector.op_Multiply(Euclid.Vector,System.Double)">
            <summary>
            Multiplies a <c>Vector</c> by a scalar
            </summary>
            <param name="v">the left hand side <c>Vector</c></param>
            <param name="f">the scalar</param>
            <returns>the <c>Vector</c> result of the multiplication</returns>
        </member>
        <member name="M:Euclid.Vector.op_Multiply(System.Double,Euclid.Vector)">
            <summary>
            Multiplies a <c>Vector</c> by a scalar
            </summary>
            <param name="f">the scalar</param>
            <param name="v">the right hand side <c>Vector</c></param>
            <returns>the <c>Vector</c> result of the multiplication</returns>
        </member>
        <member name="M:Euclid.Vector.op_Division(Euclid.Vector,System.Double)">
            <summary>
            Divides all the coefficients of a <c>Vector</c> by a scalar
            </summary>
            <param name="v">the left hand side <c>Vector</c></param>
            <param name="f">the scalar</param>
            <returns>the <c>Vector</c> result of the division</returns>
        </member>
        <member name="M:Euclid.Vector.op_Multiply(Euclid.Matrix,Euclid.Vector)">
            <summary>
            Multiplies a Matrix by a Vector
            </summary>
            <param name="m">the left hand side <c>Matrix</c></param>
            <param name="v">the right hand side <c>Vector</c></param>
            <returns>the <c>Vector</c> result of the multiplication</returns>
        </member>
        <member name="M:Euclid.Vector.op_Multiply(Euclid.Vector,Euclid.Matrix)">
            <summary>
            Multiplies a Vector by a Matrix
            </summary>
            <param name="v">the left hand side <c>Vector</c></param>
            <param name="m">the right hand side <c>Matrix</c></param>
            <returns>the <c>Vector</c> result of the multiplication</returns>
        </member>
        <member name="M:Euclid.Vector.op_Multiply(Euclid.Vector,Euclid.Vector)">
            <summary>
            Multiplies a Vector by a Vector's transpose
            </summary>
            <param name="v1">the left hand side <c>Vector</c></param>
            <param name="v2">the right hand side <c>Vector</c></param>
            <returns>the <c>Matrix</c> result of the multiplication</returns>
        </member>
        <member name="M:Euclid.Vector.Add(Euclid.Vector,Euclid.Vector)">
            <summary>
            Performs a Vector addition, after going through dimension compatibility verifications.
            </summary>
            <param name="v1">First Vector</param>
            <param name="v2">Second Vector</param>
            <returns>The sum of m1 and m2</returns>
        </member>
        <member name="M:Euclid.Vector.op_Addition(Euclid.Vector,System.Double)">
            <summary>
            Adds a scalar to all the coefficients of a <c>Vector</c>
            </summary>
            <param name="v">the left hand side <c>Vector</c></param>
            <param name="c">the scalar</param>
            <returns>the <c>Vector</c> result of the addition</returns>
        </member>
        <member name="M:Euclid.Vector.op_Addition(System.Double,Euclid.Vector)">
            <summary>
            Adds a scalar to all the coefficients of a <c>Vector</c>
            </summary>
            <param name="c">the scalar</param>
            <param name="v">the right hand side <c>Vector</c></param>
            <returns>the <c>Vector</c> result of the addition</returns>
        </member>
        <member name="M:Euclid.Vector.op_Subtraction(Euclid.Vector,System.Double)">
            <summary>
            Substracts a scalar to all the coefficients of a <c>Vector</c>
            </summary>
            <param name="v">the left hand side <c>Vector</c></param>
            <param name="c">the scalar</param>
            <returns>the <c>Vector</c> result of the substraction</returns>
        </member>
        <member name="M:Euclid.Vector.op_Subtraction(System.Double,Euclid.Vector)">
            <summary>
            Adds a scalar to the opposite of a <c>Vector</c>
            </summary>
            <param name="c">the scalar</param>
            <param name="v">the right hand side <c>Vector</c></param>
            <returns>the <c>Vector</c> result of the substraction</returns>
        </member>
        <member name="M:Euclid.Vector.op_UnaryNegation(Euclid.Vector)">
            <summary>
            Returns the opposite of the <c>Vector</c>
            </summary>
            <param name="v">the input Vector</param>
            <returns>the <c>Vector</c> opposite</returns>
        </member>
        <member name="M:Euclid.Vector.op_Addition(Euclid.Vector,Euclid.Vector)">
            <summary>
            Performs the Vector addition
            </summary>
            <param name="v1">the left hand side Vector</param>
            <param name="v2">the right hand side Vector</param>
            <returns>a <c>Vector</c></returns>
        </member>
        <member name="M:Euclid.Vector.op_Subtraction(Euclid.Vector,Euclid.Vector)">
            <summary>
            Performs a Vector substraction
            </summary>
            <param name="v1">the left hand side</param>
            <param name="v2">the right hand side</param>
            <returns>the <c>Vector</c> result of the substraction</returns>
        </member>
        <member name="M:Euclid.Vector.Scalar(Euclid.Vector,Euclid.Vector)">
            <summary>
            Returns the scalar product of the Vectors
            </summary>
            <param name="v1">the left hand side</param>
            <param name="v2">the right hand side</param>
            <returns>a double value</returns>
        </member>
        <member name="M:Euclid.Vector.Quadratic(Euclid.Vector,Euclid.Matrix,Euclid.Vector)">
            <summary>Computes a quadratic form product of two Vectors </summary>
            <param name="x">the left hand side Vector</param>
            <param name="a">the matrix</param>
            <param name="y">the right hand side Vector</param>
            <returns>a double</returns>
        </member>
        <member name="M:Euclid.Vector.Hadamard(Euclid.Vector,Euclid.Vector)">
            <summary>
            Returns the Hadamard product
            </summary>
            <param name="v1">the left hand side</param>
            <param name="v2">the right hand side</param>
            <returns>a <c>Vector</c> containing the Hadamard product</returns>
        </member>
        <member name="M:Euclid.Vector.LinearCombination(System.Double,Euclid.Vector,System.Double,Euclid.Vector)">
            <summary>
            Returns the Hadamard product
            </summary>
            <param name="f1">the left hand side factor</param>
            <param name="v1">the left hand side vector</param>
            <param name="f2">the right hand side factor</param>
            <param name="v2">the right hand side vector</param>
            <returns>a <c>Vector</c> containing the linear combination of the input</returns>
        </member>
        <member name="M:Euclid.Vector.Create(System.Double[])">
            <summary>Creates a Vector from a set of data</summary>
            <param name="data">the data set</param>
            <returns>a Vector</returns>
        </member>
        <member name="M:Euclid.Vector.Create(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>Creates a Vector from a list of data</summary>
            <param name="data">the data set</param>
            <returns>a Vector</returns>
        </member>
        <member name="M:Euclid.Vector.Create(System.Int32)">
            <summary>Creates an Vector full of zeros </summary>
            <param name="size">the Vector's size</param>
            <returns>a Vector</returns>
        </member>
        <member name="M:Euclid.Vector.Create(System.Int32,System.Double)">
            <summary>Creates a Vector </summary>
            <param name="size">the Vector's size</param>
            <param name="value">the value for all components</param>
            <returns>a Vector</returns>
        </member>
        <member name="M:Euclid.Vector.CreateRandom(System.Int32,Euclid.Distributions.Continuous.ContinuousDistribution)">
            <summary>Creates a Vector full of random variables  </summary>
            <param name="size">the vector's size</param>
            <param name="distribution">the distribution</param>
            <returns></returns>
        </member>
        <member name="M:Euclid.Vector.Equals(Euclid.Vector)">
            <summary>
            Determines whether the specified object is equal to the current object
            </summary>
            <param name="other">the object to compare with the current object</param>
            <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c></returns>
        </member>
        <member name="M:Euclid.Vector.ToString">
            <summary>
            Returns a string that represents the matrix
            </summary>
            <returns>a string that represents the matrix</returns>
        </member>
    </members>
</doc>
